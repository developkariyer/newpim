{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .product-form-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .form-section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
        }
        
        .form-section h3 {
            margin: 0 0 1rem 0;
            color: #495057;
            border-bottom: 2px solid #007bff;
            padding-bottom: 0.5rem;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #495057;
        }
        
        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.15s ease-in-out;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        @media (max-width: 700px) {
            .form-row {
                grid-template-columns: 1fr !important;
            }
        }

        @media screen and (max-width: 768px) {
            .modal-body .table thead {
                display: none;
            }

            .modal-body .table,
            .modal-body .table tbody,
            .modal-body .table tr,
            .modal-body .table td {
                display: block;
                width: 100%;
            }

            .modal-body .table tr {
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 0.5rem;
            }

            .modal-body .table td {
                text-align: right;
                padding-left: 50%; 
                position: relative;
                border: none;
                padding-bottom: 0.5rem;
                padding-top: 0.5rem;
            }
            
            .modal-body .table td::before {
                content: attr(data-label);
                position: absolute;
                left: 0.5rem;
                width: 45%;
                padding-right: 1rem;
                text-align: left;
                font-weight: 500;
                color: #495057;
            }
            
            .modal-body .table td:last-child {
                text-align: center;
                padding-left: 0;
            }

            .modal-body .table td:last-child::before {
                display: none; 
            }
        }
        
        .btn {
            padding: 0.75rem 2rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-secondary {
            background-color: #6c757d;
            color: white;
            margin-right: 1rem;
        }
        
        .btn-secondary:hover {
            background-color: #545b62;
        }
        
        .image-upload {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .image-preview {
            width: 80px;
            height: 80px;
            border: 2px dashed #dee2e6;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .image-preview:hover {
            border-color: #007bff;
            background: #e3f2fd;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #imageInput {
            display: none;
        }
        
        .upload-btn:hover {
            background: #0056b3;
        }
        
        #imageInput {
            display: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .form-disabled {
            pointer-events: none;
            opacity: 0.6;
        }

        .input-group {
            display: flex;
            align-items: stretch;
            width: 100%;
        }

        .input-group .form-control {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        /* DEƒûƒ∞≈ûƒ∞KLƒ∞K: √ñnizleme tablolarƒ± i√ßin kapsayƒ±cƒ± stili eklendi */
        .table-preview-container {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            background-color: #f8f9fa;
        }
    </style>
{% endblock %}


{% block title %}Katalog Yeni √úr√ºn Giri≈üi{% endblock %}

{% block content %}
    <div class="product-form-container">
        {% if errors is defined and errors|length > 0 %}
            <div class="alert alert-danger" style="margin-bottom: 2rem; padding: 1rem; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; color: #721c24;">
                <h4 style="margin: 0 0 1rem 0;">‚ùå Hatalar:</h4>
                <ul style="margin: 0; padding-left: 1.5rem;">
                    {% for error in errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <div id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center;">
            <div style="background: white; padding: 2rem; border-radius: 8px; text-align: center;">
                <div style="width: 40px; height: 40px; margin: 0 auto 1rem; border: 4px solid #f3f3f3; border-top: 4px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                <p style="margin: 0; font-size: 1.1rem; color: #333;">√úr√ºn olu≈üturuluyor...</p>
            </div>
        </div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'danger' ? 'danger' : (label == 'success' ? 'success' : 'info') }}" style="margin-bottom: 1rem;">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
    <form id="productForm" method="POST" enctype="multipart/form-data" action="{{ path('product_create') }}" >
        <div class="form-section" style="background: #f8f9fa; border-color: #17a2b8;">
            <h3 style="border-color: #17a2b8; color: #17a2b8;">üîç √úr√ºn Ara ve D√ºzenle</h3>
            <div class="form-group">
                <label for="productSearchInput">Mevcut √úr√ºn Ara (Identifier veya ƒ∞sim)</label>
                <input type="text" id="productSearchInput" class="form-control" placeholder="√ñrn: PTS-001 veya Premium Cotton T-Shirt">
                <div id="productSearchResults" style="display: none; position: absolute; z-index: 1000; width: 100%; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; background: white; border-radius: 4px; margin-top: 2px;"></div>
            </div>
            <div id="selectedProductInfo" style="display: none; padding: 1rem; background: #e3f2fd; border-radius: 4px; margin-top: 1rem;">
                <h5 style="margin: 0 0 0.5rem 0; color: #1976d2;">‚úÖ Se√ßilen √úr√ºn:</h5>
                <div id="selectedProductDetails"></div>
                <button type="button" id="clearSelectedProduct" class="btn btn-outline-secondary btn-sm" style="margin-top: 0.5rem;">‚ùå Se√ßimi Temizle</button>
            </div>
        </div>
        <input type="hidden" id="editingProductId" name="editingProductId" value="">
        
        <div id="step1">
            <div class="form-section">
                <h3>üìù Temel √úr√ºn Bilgileri</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="productName">√úr√ºn Adƒ± *</label>
                        <input type="text" id="productName" name="productName" class="form-control" 
                            placeholder="√ñrn: Premium Cotton T-Shirt" required>
                    </div>
                    <div class="form-group">
                        <label>√úr√ºn Resmi *</label>
                        <div class="image-upload">
                            <div class="image-preview" id="imagePreview" onclick="document.getElementById('imageInput').click()">
                                üì∑
                            </div>
                            <small style="color: #6c757d; text-align: center;">Resim y√ºklemek i√ßin tƒ±klayƒ±n</small>
                            <input type="file" id="imageInput" name="productImage" accept="image/*" required>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="productIdentifier">√úr√ºn Tanƒ±tƒ±cƒ± Adƒ± *</label>
                        <input type="text" id="productIdentifier" name="productIdentifier" class="form-control" 
                                placeholder="√ñrn: PTS-001" required>
                    </div>
                    <div class="form-group">
                        <label for="productCategory">Kategori *</label>
                        <input type="text" id="categoriesSearch" placeholder="Kategori ara..." class="form-control" style="margin-bottom: 0.5rem;">
                        <div id="categoriesResults" style="display: none; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; border-radius: 4px; padding: 0.5rem; background: white;">
                        </div>
                        <div id="categoriesSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                            <small style="color: #6c757d;">Se√ßilen kategori burada g√∂r√ºnecek...</small>
                        </div>
                        <div id="categoriesHidden"></div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="productDescription">A√ßƒ±klama</label>
                    <textarea id="productDescription" name="productDescription" class="form-control" 
                                rows="3" placeholder="√úr√ºn hakkƒ±nda detaylƒ± a√ßƒ±klama..."></textarea>
                </div>
            </div>
            <div class="form-section">
                <h3>üõí Pazaryeri Bilgileri</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="brands">Markalar *</label>
                            <input type="text" id="brandsSearch" placeholder="Marka ara..." class="form-control" style="margin-bottom: 0.5rem;">
                            <div id="brandsResults" style="display: none; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; border-radius: 4px; padding: 0.5rem; background: white;">
                            </div>
                            <div id="brandsSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                                <small style="color: #6c757d;">Se√ßilen markalar burada g√∂r√ºnecek...</small>
                            </div>
                            <div id="brandsHidden"></div>
                        </div>
                        <div class="form-group">
                            <label for="marketplaces">Pazaryerleri *</label>
                            <input type="text" id="marketplacesSearch" placeholder="Pazaryeri ara..." class="form-control" style="margin-bottom: 0.5rem;"> 
                            <div id="marketplacesResults" style="display: none; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; border-radius: 4px; padding: 0.5rem; background: white;">
                            </div>
                            <div id="marketplacesSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                                <small style="color: #6c757d;">Se√ßilen pazaryerleri burada g√∂r√ºnecek...</small>
                            </div>
                            <div id="marketplacesHidden"></div>
                        </div>
                    </div>
            </div>
            <div class="form-section">
                <h3>üé® Varyasyon ≈ûablonlarƒ±</h3>
                <div class="form-group">
                    <label for="colorTemplate">Renkler *</label>
                    <input type="text" id="colorsSearch" placeholder="Renk ara..." class="form-control" style="margin-bottom: 0.5rem;">
                    <div id="colorsResults" style="display: none; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; border-radius: 4px; padding: 0.5rem; background: white;">
                    </div>
                    <div id="colorsSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                        <small style="color: #6c757d;">Se√ßilen renkler burada g√∂r√ºnecek...</small>
                    </div>
                    <div id="colorsHidden"></div>
                    <div class="input-group" style="margin-top: 0.5rem; max-width: 400px;">
                        <input type="text" id="newColorInput" placeholder="Yeni renk girin..." class="form-control" aria-label="Yeni renk girin">
                        <button type="button" id="addNewColorBtn" class="btn btn-primary" style="min-width: 120px;">+ Renk Ekle</button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="sizeTableBtn">Beden Tablosu *</label>
                    <button type="button"
                            class="btn btn-primary w-100 d-flex align-items-center justify-content-center py-3 mb-2"
                            id="sizeTableBtn"
                            data-bs-toggle="modal"
                            data-bs-target="#sizeTableModal"
                            style="font-size:1.1rem; font-weight:500;">
                        <span style="font-size:1.5rem; margin-right:0.5rem;">üìè</span> Beden Tablosu Olu≈ütur/D√ºzenle
                    </button>
                    <input type="hidden" name="sizeTableData" id="sizeTableData">
                    <div id="sizeTablePreview" class="table-preview-container" style="display: none;"></div>
                </div>

                <div class="form-group">
                    <label for="customTableBtn">Custom Tablo</label>
                    <input type="text" id="customTableTitle" class="form-control mb-2" placeholder="Tablo ba≈ülƒ±ƒüƒ± (√∂r: Malzeme ƒ∞√ßeriƒüi)">
                    <button type="button"
                            class="btn btn-primary w-100 d-flex align-items-center justify-content-center py-3 mb-2"
                            id="customTableBtn"
                            data-bs-toggle="modal"
                            data-bs-target="#customTableModal"
                            style="font-size:1.1rem; font-weight:500;">
                        <span style="font-size:1.5rem; margin-right:0.5rem;">‚öôÔ∏è</span> Custom Tablo Olu≈ütur/D√ºzenle
                    </button>
                    <input type="hidden" name="customTableData" id="customTableData">
                    <div id="customTablePreview" class="table-preview-container" style="display: none;"></div>
                </div>
            </div>
            <!-- Form Butonlarƒ± -->
            <div style="text-align: right; margin-top: 2rem;">
            <button type="button" class="btn btn-secondary">ƒ∞ptal</button>
            <button type="button" class="btn btn-primary" id="goToVariationsBtn">ƒ∞lerle</button>
            </div>
        </div>
        <div id="step2" style="display:none;">
            <h3><span style="font-size:1.3rem;">üß©</span> Varyasyonlarƒ± Se√ß</h3>
            <div id="variationTableContainer"></div>
            <input type="hidden" name="variationsData" id="variationsData">
            <div style="text-align: right; margin-top: 2rem;">
                <button type="button" class="btn btn-secondary" id="backToStep1Btn">Geri</button>
                <button type="submit" class="btn btn-success">Kaydet</button>
            </div>
        </div>
    </form>
        <!-- Beden Tablosu Modal -->
        <div class="modal fade" id="sizeTableModal" tabindex="-1" aria-labelledby="sizeTableModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sizeTableModalLabel"><span style="font-size:1.3rem;">üìè</span> Beden Tablosu Olu≈ütur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="sizeTable">
                        <thead>
                            <tr>
                            <th>Beden</th>
                            <th>En</th>
                            <th>Boy</th>
                            <th>Y√ºkseklik</th>
                            <th>Birim</th>
                            <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Satƒ±rlar JS ile eklenecek -->
                        </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                    <button type="button" class="btn btn-success" id="addSizeRowBtn">+ Satƒ±r Ekle</button>
                    <button type="button" class="btn btn-primary" id="saveSizeTableBtn">Kaydet</button>
                </div>
                </div>
            </div>
        </div>
        <!-- Beden Tablosu Modal End -->
        <!-- Custom Tablo Modal -->
        <div class="modal fade" id="customTableModal" tabindex="-1" aria-labelledby="customTableModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="customTableModalLabel"><span style="font-size:1.3rem;">‚öôÔ∏è</span> Custom Tablo Olu≈ütur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="customTable">
                        <thead>
                            <tr>
                            <th>Deƒüer</th>
                            <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Satƒ±rlar JS ile eklenecek -->
                        </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                    <button type="button" class="btn btn-success" id="addCustomRowBtn">+ Satƒ±r Ekle</button>
                    <button type="button" class="btn btn-primary" id="saveCustomTableBtn">Kaydet</button>
                </div>
                </div>
            </div>
        </div>
        <!-- Custom Tablo Modal End -->

    </div>
</div>

{% endblock %}


{% block body_scripts %}
    {{ parent() }}
<script>
// edit start
    let selectedProduct = null;
    let isEditMode = false;

    // √úr√ºn arama fonksiyonu
    document.getElementById('productSearchInput').addEventListener('input', function() {
        const query = this.value.trim();
        if (query.length < 2) {
            document.getElementById('productSearchResults').style.display = 'none';
            return;
        }
        
        clearTimeout(productSearchTimeout);
        productSearchTimeout = setTimeout(() => {
            fetch(`/product/search-products?q=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    displayProductSearchResults(data.items);
                })
                .catch(err => console.error('√úr√ºn arama hatasƒ±:', err));
        }, 1000);
    });

    function displayProductSearchResults(items) {
        const resultsDiv = document.getElementById('productSearchResults');
        if (items.length === 0) {
            resultsDiv.innerHTML = '<div style="padding: 1rem; text-align: center; color: #6c757d;">√úr√ºn bulunamadƒ±</div>';
            resultsDiv.style.display = 'block';
            return;
        }
        
        resultsDiv.innerHTML = '';
        items.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.style.cssText = 'padding: 0.75rem; cursor: pointer; border-bottom: 1px solid #f1f3f4;';
            itemDiv.innerHTML = `
                <div style="font-weight: 500;">${item.name}</div>
                <div style="font-size: 0.875rem; color: #6c757d;">${item.productIdentifier}</div>
                <div style="font-size: 0.75rem; color: #28a745;">${item.hasVariants ? '‚úÖ Varyantlarƒ± var' : '‚ö†Ô∏è Varyant yok'}</div>
            `;
            itemDiv.addEventListener('click', () => {
                selectProductForEdit(item);
            });
            itemDiv.addEventListener('mouseenter', () => {
                itemDiv.style.backgroundColor = '#f8f9fa';
            });
            itemDiv.addEventListener('mouseleave', () => {
                itemDiv.style.backgroundColor = '';
            });
            resultsDiv.appendChild(itemDiv);
        });
        resultsDiv.style.display = 'block';
    }

    function selectProductForEdit(product) {
        selectedProduct = product;
        isEditMode = true;
        
        document.getElementById('productSearchResults').style.display = 'none';
        document.getElementById('productSearchInput').value = '';
        
        document.getElementById('selectedProductDetails').innerHTML = `
            <strong>${product.name}</strong> (${product.productIdentifier})<br>
            <small style="color: #6c757d;">${product.description || 'A√ßƒ±klama yok'}</small>
        `;
        document.getElementById('selectedProductInfo').style.display = 'block';
        document.getElementById('editingProductId').value = product.id;
        
        fillFormWithProduct(product);
        lockEditableFields();
    }

    function fillFormWithProduct(product) {
        document.getElementById('productName').value = product.name || '';
        document.getElementById('productIdentifier').value = product.productIdentifier || '';
        document.getElementById('productDescription').value = product.description || '';
        
        if (product.categoryId) {
            selectedItems.categories = [{id: product.categoryId, name: product.categoryName}];
            updateSelectedItems('categories');
        }
        if (product.brands && product.brands.length > 0) {
            selectedItems.brands = product.brands;
            updateSelectedItems('brands');
        }
        if (product.marketplaces && product.marketplaces.length > 0) {
            selectedItems.marketplaces = product.marketplaces;
            updateSelectedItems('marketplaces');
        }
        if (product.variantColors && product.variantColors.length > 0) {
            selectedItems.colors = product.variantColors;
            updateSelectedItems('colors');
        }
        if (product.imagePath) {
            document.getElementById('imagePreview').innerHTML = `<img src="${product.imagePath}" alt="Product Image">`;
        }
        if (product.sizeTable && product.sizeTable.length > 0) {
            populateSizeTable(product.sizeTable);
        }
        if (product.customTable && product.customTable.rows && product.customTable.rows.length > 0) {
            populateCustomTable(product.customTable);
        }
        if (product.hasVariants) {
            showVariantInfo(product);
        }
        applyFieldLocking(product);
        document.getElementById('productForm').action = '{{ path('product_update') }}';
    }

    function populateSizeTable(sizeTable) {
        const tbody = document.querySelector('#sizeTable tbody');
        tbody.innerHTML = ''; 
        sizeTable.forEach(row => {
            addSizeRow(row);
        });
        
        document.getElementById('sizeTableData').value = JSON.stringify(sizeTable);
        
        const previewContainer = document.getElementById('sizeTablePreview');
        let html = '<h6>Mevcut Beden Tablosu:</h6><div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>Beden</th><th>En</th><th>Boy</th><th>Y√ºkseklik</th><th>Birim</th></tr></thead><tbody>';
        sizeTable.forEach(row => {
            html += `<tr><td>${row.beden}</td><td>${row.en}</td><td>${row.boy}</td><td>${row.yukseklik}</td><td>${row.birim}</td></tr>`;
        });
        html += '</tbody></table></div>';
        previewContainer.innerHTML = html;
        previewContainer.style.display = 'block';
    }

    function populateCustomTable(customTable) {
        const tbody = document.querySelector('#customTable tbody');
        tbody.innerHTML = ''; 
        
        if (customTable.rows) {
            customTable.rows.forEach(row => {
                addCustomRow(row.deger);
            });
        }
        
        if (customTable.title) {
            document.getElementById('customTableTitle').value = customTable.title;
        }
        
        document.getElementById('customTableData').value = JSON.stringify(customTable);
        const previewContainer = document.getElementById('customTablePreview');
        let html = `<h6>Mevcut Custom Tablo:</h6><div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>${customTable.title || 'Custom'}</th></tr></thead><tbody>`;
        if (customTable.rows) {
            customTable.rows.forEach(row => {
                html += `<tr><td>${row.deger}</td></tr>`;
            });
        }
        html += '</tbody></table></div>';
        previewContainer.innerHTML = html;
        previewContainer.style.display = 'block';
    }

    function showVariantInfo(product) {
        const variantInfo = document.createElement('div');
        variantInfo.id = 'existingVariantsInfo';
        variantInfo.style.cssText = 'margin-top: 1rem; padding: 1rem; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px;';
        
        const variantColorNames = product.variantColors ? product.variantColors.map(c => c.name).join(', ') : 'Yok';
        const variantSizes = product.variants ? [...new Set(product.variants.map(v => v.size).filter(s => s))].join(', ') : 'Yok';
        const variantCustoms = product.variants ? [...new Set(product.variants.map(v => v.custom).filter(c => c))].join(', ') : 'Yok';
        
        variantInfo.innerHTML = `
            <h6 style="color: #856404; margin: 0 0 0.5rem 0;">‚ö†Ô∏è Mevcut Varyantlar (${product.variants ? product.variants.length : 0} adet):</h6>
            <div style="font-size: 0.875rem; color: #856404;">
                <strong>Renkler:</strong> ${variantColorNames}<br>
                <strong>Bedenler:</strong> ${variantSizes}<br>
                <strong>Custom:</strong> ${variantCustoms}
            </div>
        `;
        const variationSection = document.querySelector('.form-section h3').parentElement;
        const existingInfo = document.getElementById('existingVariantsInfo');
        if (existingInfo) {
            existingInfo.remove();
        }
        variationSection.appendChild(variantInfo);
    }

    function applyFieldLocking(product) {
        if (!product.canEditSizeTable) {
            const sizeTableBtn = document.getElementById('sizeTableBtn');
            sizeTableBtn.disabled = true;
            sizeTableBtn.style.opacity = '0.6';
            sizeTableBtn.style.cursor = 'not-allowed';
            sizeTableBtn.innerHTML = '<span style="font-size:1.5rem; margin-right:0.5rem;">üîí</span> Beden Tablosu (D√ºzenlenemez)';
        }
        
        if (!product.canEditCustomTable) {
            const customTableBtn = document.getElementById('customTableBtn');
            customTableBtn.disabled = true;
            customTableBtn.style.opacity = '0.6';
            customTableBtn.style.cursor = 'not-allowed';
            customTableBtn.innerHTML = '<span style="font-size:1.5rem; margin-right:0.5rem;">üîí</span> Custom Tablo (D√ºzenlenemez)';
        }
        
        const goToVariationsBtn = document.getElementById('goToVariationsBtn');
        if (product.hasVariants) {
            goToVariationsBtn.style.display = 'none';
            const infoDiv = document.createElement('div');
            infoDiv.id = 'variantWarning';
            infoDiv.style.cssText = 'padding: 1rem; background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 4px; color: #0c5460; text-align: center; margin-top: 1rem;';
            infoDiv.innerHTML = 'üí° Bu √ºr√ºnde zaten varyantlar mevcut. Sadece temel bilgiler ve renkler d√ºzenlenebilir.';
            const existingWarning = document.getElementById('variantWarning');
            if (existingWarning) {
                existingWarning.remove();
            }
            goToVariationsBtn.parentElement.appendChild(infoDiv);
        }
    }

    function lockEditableFields() {
        const identifierField = document.getElementById('productIdentifier');
        identifierField.readOnly = true;
        identifierField.style.backgroundColor = '#e9ecef';
        identifierField.style.cursor = 'not-allowed';
        document.getElementById('imageInput').removeAttribute('required');
        
        const submitBtn = document.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.textContent = 'üíæ √úr√ºn√º G√ºncelle';
        }
    }

    document.getElementById('clearSelectedProduct').addEventListener('click', function() {
        selectedProduct = null;
        isEditMode = false;
        
        document.getElementById('selectedProductInfo').style.display = 'none';
        document.getElementById('editingProductId').value = '';
        document.getElementById('productForm').reset();
        selectedItems = { colors: [], brands: [], marketplaces: [], categories: [] };
        
        unlockEditableFields();
        
        document.getElementById('productForm').action = '{{ path('product_create') }}';
    });

    function unlockEditableFields() {
        const identifierField = document.getElementById('productIdentifier');
        identifierField.readOnly = false;
        identifierField.style.backgroundColor = '';
        identifierField.style.cursor = '';
        
        document.getElementById('imageInput').setAttribute('required', 'required');
        
        const submitBtn = document.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.textContent = 'Kaydet';
        }
    }

// edit end
    let searchTimeout;
    let selectedItems = {
        colors: [],
        brands: [],
        marketplaces: [],
        categories: []
    };
    const ICONS = {
        'colors': 'üé®',
        'brands': 'üè∑Ô∏è',
        'marketplaces': 'üõí',
        'categories': 'üìÇ'
    };
    const TYPE_LABELS = {
        colors: 'renkler',
        brands: 'markalar',
        marketplaces: 'pazaryerleri',
        categories: 'kategori'
    };
    const INPUT_NAMES = {
        colors: 'colors[]',
        brands: 'brands[]',
        marketplaces: 'marketplaces[]',
        categories: 'productCategory'
    };
    const searchTypes = ['colors', 'brands', 'marketplaces', 'categories'];

    async function performSearch(type) {
        const searchInput = document.getElementById(`${type}Search`);
        if (!searchInput) {
            console.error('Search input not found:', `${type}Search`);
            return;
        }
        const query = searchInput.value.trim();
        try {
            const response = await fetch(`/product/search/${type}?q=${encodeURIComponent(query)}`);
            const data = await response.json();
            console.log(`${type} search results:`, data.items);
            displayResults(type, data.items);
        } catch (error) {
            console.error(`${type} search error:`, error);
        }
    }

    function displayResults(type, items) {
        const resultsDiv = document.getElementById(`${type}Results`);
        if (items.length === 0) {
            resultsDiv.innerHTML = '<div style="padding: 1rem; text-align: center; color: #6c757d;">Sonu√ß bulunamadƒ±</div>';
            resultsDiv.style.display = 'block';
            return;
        }
        resultsDiv.innerHTML = '';
        items.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.style.cssText = 'padding: 0.5rem; cursor: pointer; border-bottom: 1px solid #f1f3f4;';
            itemDiv.innerHTML = `${ICONS[type] || 'üìã'} ${item.name}`;
            itemDiv.addEventListener('click', () => {
                addSelectedItem(type, item);
            });
            itemDiv.addEventListener('mouseenter', () => {
                itemDiv.style.backgroundColor = '#f8f9fa';
            });
            itemDiv.addEventListener('mouseleave', () => {
                itemDiv.style.backgroundColor = '';
            });
            resultsDiv.appendChild(itemDiv);
        });
        resultsDiv.style.display = 'block';
    }

    function addSelectedItem(type, item) {
        console.log('Adding item:', type, item);
        const singleSelectTypes = ['categories'];
        if (singleSelectTypes.includes(type)) {
            selectedItems[type] = [item];
        } else {
            if (selectedItems[type].some(selectedItem => selectedItem.id === item.id)) {
                console.log('Item already selected');
                return;
            }
            selectedItems[type].push(item);
        }
        console.log(`Selected ${type}:`, selectedItems[type]);
        updateSelectedItems(type);
        document.getElementById(`${type}Search`).value = '';
        document.getElementById(`${type}Results`).style.display = 'none';
    }

    function updateSelectedItems(type) {
        console.log(`Selected ${type}:`, selectedItems[type]);
        const selectedDiv = document.getElementById(`${type}Selected`);
        const hiddenDiv = document.getElementById(`${type}Hidden`);
        if (!selectedDiv || !hiddenDiv) {
            console.error(`Elements not found for type: ${type}`);
            return;
        }
        if (selectedItems[type].length === 0) {
            selectedDiv.innerHTML = `<small style="color: #6c757d;">Se√ßilen ${TYPE_LABELS[type] || type} burada g√∂r√ºnecek...</small>`;
            hiddenDiv.innerHTML = '';
            return;
        }
        selectedDiv.innerHTML = selectedItems[type].map(item => `
            <span style="display: inline-block; background: #007bff; color: white; padding: 0.25rem 0.5rem; margin: 0.25rem; border-radius: 12px; font-size: 0.875rem;">
                ${ICONS[type] || 'üìã'} ${item.name}
                <span onclick="removeSelectedItem('${type}', ${item.id})" style="margin-left: 0.5rem; cursor: pointer; font-weight: bold;">√ó</span>
            </span>
        `).join('');
        hiddenDiv.innerHTML = selectedItems[type].map(item => 
            `<input type="hidden" name="${INPUT_NAMES[type] || type + '[]'}" value="${item.id}">`
        ).join('');
    }

    function removeSelectedItem(type, itemId) {
        selectedItems[type] = selectedItems[type].filter(item => item.id !== itemId);
        updateSelectedItems(type);
    }
    
    function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
        document.getElementById('productForm').classList.add('form-disabled');
        const submitBtn = document.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '‚è≥ ƒ∞≈üleniyor...';
        }
    }

    function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
        document.getElementById('productForm').classList.remove('form-disabled');
        const submitBtn = document.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '√úr√ºn Olu≈ütur';
        }
    }

    searchTypes.forEach(type => {
        const searchElement = document.getElementById(`${type}Search`);
        if (searchElement) {
            searchElement.addEventListener('input', () => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    performSearch(type); 
                }, 300);
            });
            console.log(`Event listener added for ${type}`);
        } else {
            console.warn(`Search element not found: ${type}Search`);
        }
    });

    let imageFile = null;
    document.getElementById('imageInput').addEventListener('change', function(e) {
        const file = e.target.files[0];
        imageFile = file;
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('imagePreview');
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById('productForm').addEventListener('submit', function(e) {
        showLoading();
        const rows = [];
        document.querySelectorAll('#variationTableContainer tbody tr').forEach(tr => {
            const checked = tr.querySelector('.variation-checkbox').checked;
            if (!checked) return;
            const tds = tr.querySelectorAll('td');
            const renk = tds[1].innerText;
            const beden = tds[2].innerText;
            const custom = tds.length > 3 ? tds[3].innerText : null;
            rows.push({ renk, beden, custom });
        });
        document.getElementById('variationsData').value = JSON.stringify(rows);
        const formData = new FormData(this);
        const data = {};
        for (const [key, value] of formData.entries()) {
            if (data[key]) {
                if (!Array.isArray(data[key])) data[key] = [data[key]];
                data[key].push(value);
            } else {
                data[key] = value;
            }
        }
        console.log('T√ºm Form Datasƒ±:', data);
        if (data.variationsData) {
            try {
                console.log('Varyasyonlar:', JSON.parse(data.variationsData));
            } catch {}
        }
    });

    document.getElementById('addNewColorBtn').addEventListener('click', function() {
        const newColor = document.getElementById('newColorInput').value.trim();
        if (!newColor) {
            alert('L√ºtfen bir renk girin.');
            return;
        }
        fetch('/product/add-color', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ name: newColor })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                addSelectedItem('colors', { id: data.id, name: newColor });
                document.getElementById('newColorInput').value = '';
            } else {
                alert(data.message || 'Renk eklenemedi.');
            }
        })
        .catch(() => alert('Sunucu hatasƒ±!'));
    });

    // Size Table Functions
    function addSizeRow(values = {}) {
        const tbody = document.querySelector('#sizeTable tbody');
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td data-label="Beden"><input type="text" class="form-control" value="${values.beden || ''}" required></td>
            <td data-label="En"><input type="number" class="form-control" value="${values.en || ''}" step="any" required></td>
            <td data-label="Boy"><input type="number" class="form-control" value="${values.boy || ''}" step="any" required></td>
            <td data-label="Y√ºkseklik"><input type="number" class="form-control" value="${values.yukseklik || ''}" step="any" required></td>
            <td data-label="Birim">
                <select class="form-select">
                    <option value="cm" ${values.birim === 'cm' ? 'selected' : ''}>cm</option>
                    <option value="mm" ${values.birim === 'mm' ? 'selected' : ''}>mm</option>
                    <option value="m" ${values.birim === 'm' ? 'selected' : ''}>m</option>
                </select>
            </td>
            <td><button type="button" class="btn btn-danger btn-sm remove-row-btn w-100">Sil</button></td>
        `;
        tbody.appendChild(tr);
    }

    document.getElementById('addSizeRowBtn').addEventListener('click', function() {
        addSizeRow();
    });

    document.querySelector('#sizeTable tbody').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-row-btn')) {
            e.target.closest('tr').remove();
        }
    });

    document.getElementById('saveSizeTableBtn').addEventListener('click', function() {
        const rows = [];
        let isValid = true;
        document.querySelectorAll('#sizeTable tbody tr').forEach(tr => {
            const rowData = {
                beden: tr.children[0].querySelector('input').value,
                en: tr.children[1].querySelector('input').value,
                boy: tr.children[2].querySelector('input').value,
                yukseklik: tr.children[3].querySelector('input').value,
                birim: tr.children[4].querySelector('select').value,
            };
            if(!rowData.beden || !rowData.en || !rowData.boy || !rowData.yukseklik) {
                isValid = false;
            }
            rows.push(rowData);
        });

        if (!isValid) {
            alert('L√ºtfen tablodaki t√ºm alanlarƒ± doldurun.');
            return;
        }

        document.getElementById('sizeTableData').value = JSON.stringify(rows);
        
        const previewContainer = document.getElementById('sizeTablePreview');
        if (rows.length > 0) {
             let html = '<div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>Beden</th><th>En</th><th>Boy</th><th>Y√ºkseklik</th><th>Birim</th></tr></thead><tbody>';
            rows.forEach(row => {
                html += `<tr><td>${row.beden}</td><td>${row.en}</td><td>${row.boy}</td><td>${row.yukseklik}</td><td>${row.birim}</td></tr>`;
            });
            html += '</tbody></table></div>';
            previewContainer.innerHTML = html;
            previewContainer.style.display = 'block'; // √ñnizlemeyi g√∂ster
        } else {
            previewContainer.style.display = 'none'; // √ñnizlemeyi gizle
            previewContainer.innerHTML = '';
        }
       
        var modal = bootstrap.Modal.getInstance(document.getElementById('sizeTableModal'));
        modal.hide();
    });
    
    // Custom Table Functions
    function addCustomRow(value = '') {
        const tbody = document.querySelector('#customTable tbody');
        const tr = document.createElement('tr');
            tr.innerHTML = `
                <td data-label="Deƒüer"><input type="text" class="form-control" value="${value}" required></td>
                <td><button type="button" class="btn btn-danger btn-sm remove-row-btn">Sil</button></td>
            `;
            tbody.appendChild(tr);
    }

    document.getElementById('addCustomRowBtn').addEventListener('click', function() {
        addCustomRow();
    });

    document.querySelector('#customTable tbody').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-row-btn')) {
            e.target.closest('tr').remove();
        }
    });

    document.getElementById('saveCustomTableBtn').addEventListener('click', function() {
        const rows = [];
        let isValid = true;
        document.querySelectorAll('#customTable tbody tr').forEach(tr => {
            const value = tr.children[0].querySelector('input').value;
            if (!value) {
                isValid = false;
            }
            rows.push({
                deger: value
            });
        });

        if (!isValid) {
            alert('L√ºtfen tablodaki t√ºm deƒüer alanlarƒ±nƒ± doldurun.');
            return;
        }

        const title = document.getElementById('customTableTitle').value.trim();
        if (!title) {
            alert('L√ºtfen Custom Tablo i√ßin bir ba≈ülƒ±k girin.');
            return;
        }

        document.getElementById('customTableData').value = JSON.stringify({ title, rows });
        
        const previewContainer = document.getElementById('customTablePreview');
        if (rows.length > 0) {
            let html = `<div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>${title}</th></tr></thead><tbody>`;
            rows.forEach(row => {
                html += `<tr><td>${row.deger}</td></tr>`;
            });
            html += '</tbody></table></div>';
            previewContainer.innerHTML = html;
            previewContainer.style.display = 'block'; // √ñnizlemeyi g√∂ster
        } else {
             previewContainer.style.display = 'none'; // √ñnizlemeyi gizle
             previewContainer.innerHTML = '';
        }
        
        var modal = bootstrap.Modal.getInstance(document.getElementById('customTableModal'));
        modal.hide();
    });

    document.getElementById('goToVariationsBtn').onclick = function() {
        const step1 = document.getElementById('step1');
        const requiredInputs = step1.querySelectorAll('input[required], textarea[required], select[required]');
        let isValid = true;
        requiredInputs.forEach(input => {
            if (!input.value.trim()) {
                input.classList.add('is-invalid');
                isValid = false;
            } else {
                input.classList.remove('is-invalid');
            }
        });
        if (!isValid) {
            alert('L√ºtfen t√ºm zorunlu alanlarƒ± doldurun.');
            return;
        }
        const colors = selectedItems.colors.map(c => c.name);
        const sizesData = JSON.parse(document.getElementById('sizeTableData').value || '[]');
        const sizes = sizesData.map(s => s.beden);
        let customs = [];
        try {
            const customData = JSON.parse(document.getElementById('customTableData').value || '{}');
            customs = (customData.rows || []).map(r => r.deger);
        } catch {}

        function cartesianProduct(arrays) {
            return arrays.reduce((a, b) => a.flatMap(d => b.map(e => [ ...(Array.isArray(d) ? d : [d]), e ])));
        }
        let combos = cartesianProduct([colors, sizes]);
        if (customs.length > 0) {
            combos = cartesianProduct([colors, sizes, customs]);
        }

        let html = '<table class="table table-bordered"><thead><tr>';
        html += '<th>Se√ß</th><th>Renk</th><th>Beden</th>';
        if (customs.length > 0) html += '<th>Custom</th>';
        html += '</tr></thead><tbody>';
        combos.forEach((combo, i) => {
            const sizeObj = sizesData.find(s => s.beden === combo[1]);
            let sizeLabel = combo[1];
            if (sizeObj) {
                sizeLabel += ` (En: ${sizeObj.en}, Boy: ${sizeObj.boy}, Y√ºkseklik: ${sizeObj.yukseklik}, ${sizeObj.birim})`;
            }
            html += `<tr>
                <td><input type="checkbox" class="variation-checkbox" data-index="${i}"></td>
                <td>${combo[0]}</td>
                <td>${sizeLabel}</td>`;
            if (customs.length > 0) html += `<td>${combo[2]}</td>`;
            html += '</tr>';
        });
        html += '</tbody></table>';
        document.getElementById('variationTableContainer').innerHTML = html;

        document.getElementById('step1').style.display = 'none';
        document.getElementById('step2').style.display = 'block';
    };

    document.getElementById('backToStep1Btn').onclick = function() {
        document.getElementById('step2').style.display = 'none';
        document.getElementById('step1').style.display = 'block';
    };

</script>
{% endblock %}