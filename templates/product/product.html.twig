{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .delete-variant-btn {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 3px;
            transition: all 0.2s;
        }

        .delete-variant-btn:hover {
            background-color: #dc3545 !important;
            transform: scale(1.05);
        }

        .variant-locked .delete-variant-btn {
            opacity: 1;
        }

        .variant-locked input[type="checkbox"]:disabled {
            opacity: 0.5 !important;
            cursor: not-allowed !important;
            pointer-events: none !important;
        }

        .product-form-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .form-section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
        }
        
        .form-section h3 {
            margin: 0 0 1rem 0;
            color: #495057;
            border-bottom: 2px solid #007bff;
            padding-bottom: 0.5rem;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #495057;
        }
        
        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.15s ease-in-out;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        @media (max-width: 700px) {
            .form-row {
                grid-template-columns: 1fr !important;
            }
        }

        @media screen and (max-width: 768px) {
            .modal-body .table thead {
                display: none;
            }

            .modal-body .table,
            .modal-body .table tbody,
            .modal-body .table tr,
            .modal-body .table td {
                display: block;
                width: 100%;
            }

            .modal-body .table tr {
                margin-bottom: 1rem;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 0.5rem;
            }

            .modal-body .table td {
                text-align: right;
                padding-left: 50%; 
                position: relative;
                border: none;
                padding-bottom: 0.5rem;
                padding-top: 0.5rem;
            }
            
            .modal-body .table td::before {
                content: attr(data-label);
                position: absolute;
                left: 0.5rem;
                width: 45%;
                padding-right: 1rem;
                text-align: left;
                font-weight: 500;
                color: #495057;
            }
            
            .modal-body .table td:last-child {
                text-align: center;
                padding-left: 0;
            }

            .modal-body .table td:last-child::before {
                display: none; 
            }
        }
        
        .btn {
            padding: 0.75rem 2rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-secondary {
            background-color: #6c757d;
            color: white;
            margin-right: 1rem;
        }
        
        .btn-secondary:hover {
            background-color: #545b62;
        }
        
        .image-upload {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .image-preview {
            width: 80px;
            height: 80px;
            border: 2px dashed #dee2e6;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .image-preview:hover {
            border-color: #007bff;
            background: #e3f2fd;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #imageInput {
            display: none;
        }
        
        .upload-btn:hover {
            background: #0056b3;
        }
        
        #imageInput {
            display: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .form-disabled {
            pointer-events: none;
            opacity: 0.6;
        }

        .input-group {
            display: flex;
            align-items: stretch;
            width: 100%;
        }

        .input-group .form-control {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        .table-preview-container {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            background-color: #f8f9fa;
        }

        /* Locked table row styles */
        .locked-row {
            background-color: #f8f9fa;
            opacity: 0.7;
        }

        .locked-row input, .locked-row select {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

        .locked-row .remove-row-btn {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }

        /* Variant matrix styles */
        .variant-locked {
            background-color: #fff3cd;
            color: #856404;
        }

        .variant-locked input[type="checkbox"] {
            cursor: not-allowed;
            pointer-events: none;
        }
    </style>
{% endblock %}

{% block title %}Katalog Yeni √úr√ºn Giri≈üi{% endblock %}

{% block content %}
    <div class="product-form-container">
        {% if errors is defined and errors|length > 0 %}
            <div class="alert alert-danger" style="margin-bottom: 2rem; padding: 1rem; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; color: #721c24;">
                <h4 style="margin: 0 0 1rem 0;">‚ùå Hatalar:</h4>
                <ul style="margin: 0; padding-left: 1.5rem;">
                    {% for error in errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        <div id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center;">
            <div style="background: white; padding: 2rem; border-radius: 8px; text-align: center;">
                <div style="width: 40px; height: 40px; margin: 0 auto 1rem; border: 4px solid #f3f3f3; border-top: 4px solid #007bff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                <p style="margin: 0; font-size: 1.1rem; color: #333;">√úr√ºn i≈üleniyor...</p>
            </div>
        </div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'danger' ? 'danger' : (label == 'success' ? 'success' : 'info') }}" style="margin-bottom: 1rem;">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}

        <form id="productForm" method="POST" enctype="multipart/form-data" action="{{ path('product_create') }}">
            <!-- Search Product Start -->
            <div class="form-section" style="background: #f8f9fa; border-color: #17a2b8;">
                <h3 style="border-color: #17a2b8; color: #17a2b8;">üîç √úr√ºn Ara ve D√ºzenle</h3>
                <div class="form-group">
                    <label for="productSearchInput">Mevcut √úr√ºn Ara (Identifier veya ƒ∞sim)</label>
                    <input type="text" id="productSearchInput" class="form-control" placeholder="√ñrn: PTS-001 veya Premium Cotton T-Shirt">
                    <div id="productSearchResults" style="display: none; position: absolute; z-index: 1000; width: 100%; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; background: white; border-radius: 4px; margin-top: 2px;"></div>
                </div>
                <div id="selectedProductInfo" style="display: none; padding: 1rem; background: #e3f2fd; border-radius: 4px; margin-top: 1rem;">
                    <h5 style="margin: 0 0 0.5rem 0; color: #1976d2;">‚úÖ Se√ßilen √úr√ºn:</h5>
                    <div id="selectedProductDetails"></div>
                    <button type="button" id="clearSelectedProduct" class="btn btn-outline-secondary btn-sm" style="margin-top: 0.5rem;">‚ùå Se√ßimi Temizle</button>
                </div>
            </div>
            <input type="hidden" id="editingProductId" name="editingProductId" value="">   
            <!-- Search Product End -->

            <!-- Form Step1:Product Info Start -->
            <div id="step1">
                <div class="form-section">
                    <h3>üìù Temel √úr√ºn Bilgileri</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="productName">√úr√ºn Adƒ± *</label>
                            <input type="text" id="productName" name="productName" class="form-control" placeholder="√ñrn: Premium Cotton T-Shirt" required>
                        </div>
                        <div class="form-group">
                            <label>√úr√ºn Resmi *</label>
                            <div class="image-upload">
                                <div class="image-preview" id="imagePreview" onclick="document.getElementById('imageInput').click()">üì∑</div>
                                <small style="color: #6c757d; text-align: center;">Resim y√ºklemek i√ßin tƒ±klayƒ±n</small>
                                <input type="file" id="imageInput" name="productImage" accept="image/*" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="productIdentifier">√úr√ºn Tanƒ±tƒ±cƒ± Adƒ± *</label>
                            <input type="text" id="productIdentifier" name="productIdentifier" class="form-control" placeholder="√ñrn: PTS-001" required>
                        </div>
                        <div class="form-group">
                            <label for="productCategory">Kategori *</label>
                            <select id="categoriesSearch" class="form-control" style="margin-bottom: 0.5rem;">
                                <option value="">Kategori se√ßin...</option>
                                {% for category in categories %}
                                    <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                            <div id="categoriesSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                                <small style="color: #6c757d;">Se√ßilen kategori burada g√∂r√ºnecek...</small>
                            </div>
                            <div id="categoriesHidden"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="productDescription">A√ßƒ±klama</label>
                        <textarea id="productDescription" name="productDescription" class="form-control" rows="3" placeholder="√úr√ºn hakkƒ±nda detaylƒ± a√ßƒ±klama..."></textarea>
                    </div>
                </div>

                <div class="form-section">
                    <h3>üõí Pazaryeri Bilgileri</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="brands">Markalar *</label>
                            <select id="brandsSearch" class="form-control" style="margin-bottom: 0.5rem;">
                                <option value="">Marka se√ßin...</option>
                                {% for brand in brands %}
                                    <option value="{{ brand.id }}">{{ brand.name }}</option>
                                {% endfor %}
                            </select>
                            <div id="brandsSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                                <small style="color: #6c757d;">Se√ßilen markalar burada g√∂r√ºnecek...</small>
                            </div>
                            <div id="brandsHidden"></div>
                        </div>
                        <div class="form-group">
                            <label for="marketplaces">Pazaryerleri *</label>
                            <select id="marketplacesSearch" class="form-control" style="margin-bottom: 0.5rem;">
                                <option value="">Pazaryeri se√ßin...</option>
                                {% for marketplace in marketplaces %}
                                    <option value="{{ marketplace.id }}">{{ marketplace.name }}</option>
                                {% endfor %}
                            </select>
                            <div id="marketplacesSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                                <small style="color: #6c757d;">Se√ßilen pazaryerleri burada g√∂r√ºnecek...</small>
                            </div>
                            <div id="marketplacesHidden"></div>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h3>üé® Varyasyon ≈ûablonlarƒ±</h3>
                    <div class="form-group">
                        <label for="colorTemplate">Renkler *</label>
                        <input type="text" id="colorsSearch" placeholder="Renk ara..." class="form-control" style="margin-bottom: 0.5rem;">
                        <div id="colorsResults" style="display: none; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; border-radius: 4px; padding: 0.5rem; background: white;"></div>
                        <div id="colorsSelected" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 0.5rem; background: #f8f9fa;">
                            <small style="color: #6c757d;">Se√ßilen renkler burada g√∂r√ºnecek...</small>
                        </div>
                        <div id="colorsHidden"></div>
                        <div class="input-group" style="margin-top: 0.5rem; max-width: 400px;">
                            <input type="text" id="newColorInput" placeholder="Yeni renk girin..." class="form-control" aria-label="Yeni renk girin">
                            <button type="button" id="addNewColorBtn" class="btn btn-primary" style="min-width: 120px;">+ Renk Ekle</button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="sizeTableBtn">Beden Tablosu *</label>
                        <button type="button" class="btn btn-primary w-100 d-flex align-items-center justify-content-center py-3 mb-2" id="sizeTableBtn" data-bs-toggle="modal" data-bs-target="#sizeTableModal" style="font-size:1.1rem; font-weight:500;">
                            <span style="font-size:1.5rem; margin-right:0.5rem;">üìè</span> Beden Tablosu Olu≈ütur/D√ºzenle
                        </button>
                        <input type="hidden" name="sizeTableData" id="sizeTableData">
                        <div id="sizeTablePreview" class="table-preview-container" style="display: none;"></div>
                    </div>
                    <div class="form-group">
                        <label for="customTableBtn">Custom Tablo</label>
                        <input type="text" id="customTableTitle" class="form-control mb-2" placeholder="Tablo ba≈ülƒ±ƒüƒ± (√∂r: Malzeme ƒ∞√ßeriƒüi)">
                        <button type="button" class="btn btn-primary w-100 d-flex align-items-center justify-content-center py-3 mb-2" id="customTableBtn" data-bs-toggle="modal" data-bs-target="#customTableModal" style="font-size:1.1rem; font-weight:500;">
                            <span style="font-size:1.5rem; margin-right:0.5rem;">‚öôÔ∏è</span> Custom Tablo Olu≈ütur/D√ºzenle
                        </button>
                        <input type="hidden" name="customTableData" id="customTableData">
                        <div id="customTablePreview" class="table-preview-container" style="display: none;"></div>
                    </div>
                </div>

                <div style="text-align: right; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary">ƒ∞ptal</button>
                    <button type="button" class="btn btn-primary" id="goToVariationsBtn">ƒ∞lerle</button>
                </div>
            </div>
            <!-- Form Step1 End -->

            <!-- Form Step2:Select Variations Start -->
            <div id="step2" style="display:none;">
                <h3><span style="font-size:1.3rem;">üß©</span> Varyasyonlarƒ± Se√ß</h3>
                <div id="variationTableContainer"></div>
                <input type="hidden" name="variationsData" id="variationsData">
                <div style="text-align: right; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" id="backToStep1Btn">Geri</button>
                    <button type="submit" class="btn btn-success" id="submitBtn">Kaydet</button>
                </div>
            </div>
            <!-- Form Step2 End -->

        </form>

        <!-- Size Table Model Start -->
        <div class="modal fade" id="sizeTableModal" tabindex="-1" aria-labelledby="sizeTableModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="sizeTableModalLabel"><span style="font-size:1.3rem;">üìè</span> Beden Tablosu Olu≈ütur</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                    </div>
                    <div class="modal-body">
                        <div class="table-responsive">
                            <table class="table table-bordered" id="sizeTable">
                                <thead>
                                    <tr>
                                        <th>Beden</th>
                                        <th>En</th>
                                        <th>Boy</th>
                                        <th>Y√ºkseklik</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                        <button type="button" class="btn btn-success" id="addSizeRowBtn">+ Satƒ±r Ekle</button>
                        <button type="button" class="btn btn-primary" id="saveSizeTableBtn">Kaydet</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Size Table Model End -->

        <!-- Custom Table Model Start -->
        <div class="modal fade" id="customTableModal" tabindex="-1" aria-labelledby="customTableModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="customTableModalLabel"><span style="font-size:1.3rem;">‚öôÔ∏è</span> Custom Tablo Olu≈ütur</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                    </div>
                    <div class="modal-body">
                        <div class="table-responsive">
                            <table class="table table-bordered" id="customTable">
                                <thead>
                                    <tr>
                                        <th>Deƒüer</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                        <button type="button" class="btn btn-success" id="addCustomRowBtn">+ Satƒ±r Ekle</button>
                        <button type="button" class="btn btn-primary" id="saveCustomTableBtn">Kaydet</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Custom Table Model End -->
    </div>
{% endblock %}

{% block body_scripts %}
    {{ parent() }}
    <script>
        'use strict';

        /**
         * Ana √úr√ºn Form Y√∂neticisi
         */
        class ProductFormManager {
            constructor() {
                this.state = {
                    selectedProduct: null,
                    isEditMode: false,
                    lockedVariants: [],
                    selectedItems: {
                        colors: [],
                        brands: [],
                        marketplaces: [],
                        categories: []
                    },
                    searchTimeout: null,
                    currentStep: 1
                };

                this.config = {
                    searchDelay: 300,
                    minSearchLength: 2,
                    endpoints: {
                        productSearch: '/product/search-products',
                        itemSearch: '/product/search',
                        addColor: '/product/add-color',
                        deleteVariant: '/product/delete-variant'
                    },
                    icons: {
                        colors: 'üé®',
                        brands: 'üè∑Ô∏è',
                        marketplaces: 'üõí',
                        categories: 'üìÇ'
                    },
                    typeLabels: {
                        colors: 'renkler',
                        brands: 'markalar',
                        marketplaces: 'pazaryerleri',
                        categories: 'kategori'
                    },
                    inputNames: {
                        colors: 'colors[]',
                        brands: 'brands[]',
                        marketplaces: 'marketplaces[]',
                        categories: 'productCategory'
                    }
                };

                this.searchService = new SearchService(this.config);
                this.formService = new FormService(this.config, this.state);
                this.tableService = new TableService();
                this.variationService = new VariationService(this.state);
                this.validationService = new ValidationService();
                this.uiService = new UIService();

                this.initialize();
            }

            initialize() {
                try {
                    this.bindEvents();
                    this.validateEnvironment();
                    console.log('‚úÖ ProductFormManager initialized successfully');
                } catch (error) {
                    console.error('‚ùå ProductFormManager initialization failed:', error);
                    this.uiService.showError('Uygulama ba≈ülatƒ±lamadƒ±. L√ºtfen sayfayƒ± yenileyin.');
                }
            }

            bindEvents() {
                this.bindProductSearchEvents();
                this.bindFormEvents();
                this.bindSelectionEvents();
                this.bindNavigationEvents();
                this.bindTableEvents();
                this.bindVariantEvents();
            }

            bindProductSearchEvents() {
                const searchInput = this.getElement('productSearchInput');
                if (searchInput) {
                    searchInput.addEventListener('input', this.debounce(
                        (e) => this.handleProductSearch(e.target.value),
                        this.config.searchDelay
                    ));
                }

                const clearButton = this.getElement('clearSelectedProduct');
                if (clearButton) {
                    clearButton.addEventListener('click', () => this.clearForm());
                }
            }

            bindFormEvents() {
                const form = this.getElement('productForm');
                if (form) {
                    form.addEventListener('submit', (e) => {
                        e.preventDefault();
                        this.handleFormSubmit();
                    });
                }

                const imageInput = this.getElement('imageInput');
                if (imageInput) {
                    imageInput.addEventListener('change', (e) => this.handleImageUpload(e));
                }

                const addColorBtn = this.getElement('addNewColorBtn');
                if (addColorBtn) {
                    addColorBtn.addEventListener('click', () => this.handleAddNewColor());
                }
            }

            bindSelectionEvents() {
                // Searchable items (colors)
                const colorsSearch = this.getElement('colorsSearch');
                if (colorsSearch) {
                    colorsSearch.addEventListener('input', this.debounce(
                        () => this.handleItemSearch('colors'),
                        this.config.searchDelay
                    ));
                }

                // Selectable items (categories, brands, marketplaces)
                ['categories', 'brands', 'marketplaces'].forEach(type => {
                    const selectElement = this.getElement(`${type}Search`);
                    if (selectElement) {
                        selectElement.addEventListener('change', (e) => this.handleItemSelect(type, e));
                    }
                });
            }

            bindNavigationEvents() {
                const goToVariationsBtn = this.getElement('goToVariationsBtn');
                if (goToVariationsBtn) {
                    goToVariationsBtn.addEventListener('click', () => this.handleGoToVariations());
                }

                const backToStep1Btn = this.getElement('backToStep1Btn');
                if (backToStep1Btn) {
                    backToStep1Btn.addEventListener('click', () => this.showStep(1));
                }
            }

            bindTableEvents() {
                const tableButtons = [
                    { id: 'addSizeRowBtn', handler: () => this.tableService.addSizeRow() },
                    { id: 'addCustomRowBtn', handler: () => this.tableService.addCustomRow() },
                    { id: 'saveSizeTableBtn', handler: () => this.tableService.saveSizeTable() },
                    { id: 'saveCustomTableBtn', handler: () => this.tableService.saveCustomTable() }
                ];

                tableButtons.forEach(({ id, handler }) => {
                    const element = this.getElement(id);
                    if (element) {
                        element.addEventListener('click', handler);
                    }
                });

                this.bindTableRowDeletion('sizeTable');
                this.bindTableRowDeletion('customTable');
            }

            bindTableRowDeletion(tableId) {
                const table = this.getElement(tableId);
                if (table) {
                    const tbody = table.querySelector('tbody');
                    if (tbody) {
                        tbody.addEventListener('click', (e) => {
                            if (e.target.classList.contains('remove-row-btn') &&
                                !e.target.closest('tr').classList.contains('locked-row')) {
                                e.target.closest('tr').remove();
                            }
                        });
                    }
                }
            }

            bindVariantEvents() {
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('delete-variant-btn')) {
                        this.handleDeleteVariant(e.target);
                    }
                });
            }

            // Product Search Methods
            async handleProductSearch(query) {
                if (query.length < this.config.minSearchLength) {
                    this.uiService.hideElement('productSearchResults');
                    return;
                }

                try {
                    const results = await this.searchService.searchProducts(query);
                    this.displayProductSearchResults(results);
                } catch (error) {
                    console.error('Product search failed:', error);
                    this.uiService.showError('√úr√ºn arama ba≈üarƒ±sƒ±z.');
                }
            }

            displayProductSearchResults(items) {
                const resultsDiv = this.getElement('productSearchResults');
                if (!resultsDiv) return;

                if (items.length === 0) {
                    resultsDiv.innerHTML = '<div style="padding: 1rem; text-align: center; color: #6c757d;">√úr√ºn bulunamadƒ±</div>';
                    this.uiService.showElement('productSearchResults');
                    return;
                }

                resultsDiv.innerHTML = items.map(item => `
                    <div class="search-result-item" data-product-id="${item.id}" style="padding: 0.75rem; cursor: pointer; border-bottom: 1px solid #f1f3f4;">
                        <div style="font-weight: 500;">${this.escapeHtml(item.name)}</div>
                        <div style="font-size: 0.875rem; color: #6c757d;">${this.escapeHtml(item.productIdentifier)}</div>
                        <div style="font-size: 0.75rem; color: #28a745;">${item.hasVariants ? '‚úÖ Varyantlarƒ± var' : '‚ö†Ô∏è Varyant yok'}</div>
                    </div>
                `).join('');

                resultsDiv.addEventListener('click', (e) => {
                    const resultItem = e.target.closest('.search-result-item');
                    if (resultItem) {
                        const productId = resultItem.dataset.productId;
                        const product = items.find(item => item.id == productId);
                        if (product) {
                            this.selectProductForEdit(product);
                        }
                    }
                });

                this.uiService.showElement('productSearchResults');
            }

            selectProductForEdit(product) {
                try {
                    this.state.selectedProduct = product;
                    this.state.isEditMode = true;

                    this.uiService.hideElement('productSearchResults');
                    this.getElement('productSearchInput').value = '';

                    this.displaySelectedProduct(product);
                    this.formService.fillForm(product);
                    this.formService.setEditMode();

                    this.variationService.updateLockedVariants(product);

                    Object.keys(this.state.selectedItems).forEach(type => {
                        this.updateSelectedItems(type);
                    });

                } catch (error) {
                    console.error('Product selection failed:', error);
                    this.uiService.showError('√úr√ºn se√ßimi ba≈üarƒ±sƒ±z.');
                }
            }

            displaySelectedProduct(product) {
                const detailsElement = this.getElement('selectedProductDetails');
                if (detailsElement) {
                    detailsElement.innerHTML = `
                        <strong>${this.escapeHtml(product.name)}</strong> (${this.escapeHtml(product.productIdentifier)})<br>
                        <small style="color: #6c757d;">${this.escapeHtml(product.description || 'A√ßƒ±klama yok')}</small>
                    `;
                }
                this.uiService.showElement('selectedProductInfo');
                this.getElement('editingProductId').value = product.id;
            }

            // Item Selection Methods
            async handleItemSearch(type) {
                const searchInput = this.getElement(`${type}Search`);
                if (!searchInput) return;

                const query = searchInput.value.trim();
                if (query.length < this.config.minSearchLength) {
                    this.uiService.hideElement(`${type}Results`);
                    return;
                }

                try {
                    const results = await this.searchService.searchItems(type, query);
                    this.displayItemSearchResults(type, results);
                } catch (error) {
                    console.error(`${type} search failed:`, error);
                }
            }

            displayItemSearchResults(type, items) {
                const resultsDiv = this.getElement(`${type}Results`);
                if (!resultsDiv) return;

                if (items.length === 0) {
                    resultsDiv.innerHTML = '<div style="padding: 1rem; text-align: center; color: #6c757d;">Sonu√ß bulunamadƒ±</div>';
                    this.uiService.showElement(`${type}Results`);
                    return;
                }

                resultsDiv.innerHTML = items.map(item => `
                    <div class="item-result" data-item-id="${item.id}" data-item-name="${this.escapeHtml(item.name)}" 
                         style="padding: 0.5rem; cursor: pointer; border-bottom: 1px solid #f1f3f4;">
                        ${this.config.icons[type] || 'üìã'} ${this.escapeHtml(item.name)}
                    </div>
                `).join('');

                resultsDiv.addEventListener('click', (e) => {
                    const resultItem = e.target.closest('.item-result');
                    if (resultItem) {
                        const item = {
                            id: resultItem.dataset.itemId,
                            name: resultItem.dataset.itemName
                        };
                        this.addSelectedItem(type, item);
                    }
                });

                this.uiService.showElement(`${type}Results`);
            }

            handleItemSelect(type, event) {
                const selectedOption = event.target.options[event.target.selectedIndex];
                if (selectedOption.value) {
                    const item = {
                        id: selectedOption.value,
                        name: selectedOption.text
                    };
                    this.addSelectedItem(type, item);
                    event.target.selectedIndex = 0;
                }
            }

            addSelectedItem(type, item) {
                try {
                    const singleSelectTypes = ['categories'];

                    if (singleSelectTypes.includes(type)) {
                        this.state.selectedItems[type] = [item];
                    } else {
                        if (this.state.selectedItems[type].some(selectedItem => selectedItem.id === item.id)) {
                            return;
                        }
                        this.state.selectedItems[type].push(item);
                    }

                    this.updateSelectedItems(type);
                    this.clearSearchInput(type);
                } catch (error) {
                    console.error('Add selected item failed:', error);
                }
            }

            updateSelectedItems(type) {
                const selectedDiv = this.getElement(`${type}Selected`);
                const hiddenDiv = this.getElement(`${type}Hidden`);

                if (!selectedDiv || !hiddenDiv) return;

                if (this.state.selectedItems[type].length === 0) {
                    selectedDiv.innerHTML = `<small style="color: #6c757d;">Se√ßilen ${this.config.typeLabels[type] || type} burada g√∂r√ºnecek...</small>`;
                    hiddenDiv.innerHTML = '';
                    return;
                }

                selectedDiv.innerHTML = this.state.selectedItems[type].map(item => {
                    const isLocked = this.isItemLocked(type, item);
                    const lockIcon = isLocked ? 'üîí ' : '';
                    const removeButton = isLocked ?
                        `<span style="margin-left: 0.5rem; color: #6c757d; cursor: not-allowed;" title="Bu ${this.config.typeLabels[type]} varyantlarda kullanƒ±ldƒ±ƒüƒ± i√ßin kaldƒ±rƒ±lamaz">üîí</span>` :
                        `<span onclick="productFormManager.removeSelectedItem('${type}', ${item.id})" style="margin-left: 0.5rem; cursor: pointer; font-weight: bold;">√ó</span>`;

                    return `
                        <span style="display: inline-block; background: ${isLocked ? '#6c757d' : '#007bff'}; color: white; padding: 0.25rem 0.5rem; margin: 0.25rem; border-radius: 12px; font-size: 0.875rem;">
                            ${lockIcon}${this.config.icons[type] || 'üìã'} ${this.escapeHtml(item.name)}
                            ${removeButton}
                        </span>
                    `;
                }).join('');

                hiddenDiv.innerHTML = this.state.selectedItems[type].map(item =>
                    `<input type="hidden" name="${this.config.inputNames[type] || type + '[]'}" value="${item.id}">`
                ).join('');
            }

            isItemLocked(type, item) {
                if (type === 'colors' && this.state.lockedVariants.length > 0) {
                    return this.state.lockedVariants.some(v => v.color === item.name);
                }
                return false;
            }

            removeSelectedItem(type, itemId) {
                const item = this.state.selectedItems[type].find(item => item.id == itemId);
                if (!item) return;

                if (this.isItemLocked(type, item)) {
                    this.uiService.showError(`Bu ${this.config.typeLabels[type]} varyantlarda kullanƒ±ldƒ±ƒüƒ± i√ßin kaldƒ±rƒ±lamaz.`);
                    return;
                }

                this.state.selectedItems[type] = this.state.selectedItems[type].filter(item => item.id != itemId);
                this.updateSelectedItems(type);
            }

            clearSearchInput(type) {
                const searchInput = this.getElement(`${type}Search`);
                if (searchInput) {
                    searchInput.value = '';
                }
                this.uiService.hideElement(`${type}Results`);
            }

            // Image Upload Methods
            handleImageUpload(event) {
                const file = event.target.files[0];
                if (!file) return;

                if (!file.type.startsWith('image/')) {
                    this.uiService.showError('L√ºtfen ge√ßerli bir resim dosyasƒ± se√ßin.');
                    event.target.value = '';
                    return;
                }

                const maxSize = 5 * 1024 * 1024; // 5MB
                if (file.size > maxSize) {
                    this.uiService.showError('Resim dosyasƒ± √ßok b√ºy√ºk. Maksimum 5MB olmalƒ±dƒ±r.');
                    event.target.value = '';
                    return;
                }

                const reader = new FileReader();

                reader.onload = (e) => {
                    try {
                        const preview = this.getElement('imagePreview');
                        if (preview) {
                            preview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="width: 100%; height: 100%; object-fit: cover;">`;
                        }
                    } catch (error) {
                        console.error('Image preview failed:', error);
                        this.uiService.showError('Resim √∂nizleme ba≈üarƒ±sƒ±z.');
                    }
                };

                reader.onerror = () => {
                    this.uiService.showError('Resim y√ºklenirken bir hata olu≈ütu.');
                    event.target.value = '';
                };

                reader.readAsDataURL(file);
            }

            // Color Management Methods
            async handleAddNewColor() {
                const colorInput = this.getElement('newColorInput');
                if (!colorInput) return;

                const newColor = colorInput.value.trim();
                if (!newColor) {
                    this.uiService.showError('L√ºtfen bir renk girin.');
                    return;
                }

                try {
                    const result = await this.searchService.addColor(newColor);
                    this.addSelectedItem('colors', { id: result.id, name: newColor });
                    colorInput.value = '';
                    this.uiService.showSuccess('Renk ba≈üarƒ±yla eklendi.');
                } catch (error) {
                    console.error('Add color failed:', error);
                    this.uiService.showError('Renk eklenemedi.');
                }
            }

            // Navigation Methods
            handleGoToVariations() {
                if (!this.validationService.validateStep1()) {
                    return;
                }

                try {
                    this.variationService.generateMatrix();
                    this.showStep(2);
                } catch (error) {
                    console.error('Generate variations failed:', error);
                    this.uiService.showError('Varyasyon matrisi olu≈üturulamadƒ±.');
                }
            }

            showStep(stepNumber) {
                this.state.currentStep = stepNumber;

                for (let i = 1; i <= 2; i++) {
                    const stepElement = this.getElement(`step${i}`);
                    if (stepElement) {
                        stepElement.style.display = i === stepNumber ? 'block' : 'none';
                    }
                }
            }

            // Variant Management Methods
            async handleDeleteVariant(button) {
                const color = button.dataset.color;
                const size = button.dataset.size;
                const custom = button.dataset.custom || null;

                const confirmMessage = `"${color} - ${size}${custom ? ' - ' + custom : ''}" varyantƒ±nƒ± silmek istediƒüinizden emin misiniz?\n\nBu i≈ülem √ºr√ºn√º yayƒ±ndan kaldƒ±racaktƒ±r (unpublish).`;

                if (!confirm(confirmMessage)) {
                    return;
                }

                try {
                    this.uiService.showLoading();

                    const response = await fetch(this.config.endpoints.deleteVariant, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            productId: this.state.selectedProduct.id,
                            variantData: {
                                color: color,
                                size: size,
                                custom: custom
                            }
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Variant silme ba≈üarƒ±sƒ±z');
                    }

                    const result = await response.json();

                    if (result.success) {
                        this.uiService.showSuccess('Varyant silindi.');
                        this.removeVariantFromLocked(color, size, custom);
                        this.variationService.generateMatrix();
                    } else {
                        throw new Error(result.message || 'Variant silme ba≈üarƒ±sƒ±z');
                    }

                } catch (error) {
                    console.error('Delete variant failed:', error);
                    this.uiService.showError(`Variant silinemedi: ${error.message}`);
                } finally {
                    this.uiService.hideLoading();
                }
            }

            removeVariantFromLocked(color, size, custom) {
                const normalizedCustom = (custom === undefined || custom === null || custom === '') ? null : custom;

                this.state.lockedVariants = this.state.lockedVariants.filter(v => {
                    const normalizedLockedCustom = (v.custom === undefined || v.custom === null) ? null : v.custom;

                    const isMatch = (
                        v.color === color &&
                        v.size === size &&
                        normalizedLockedCustom === normalizedCustom
                    );

                    return !isMatch;
                });
            }

            // Form Submission Methods
            async handleFormSubmit() {
                try {
                    if (!this.validationService.validateStep1()) {
                        return;
                    }

                    this.uiService.showLoading();
                    this.variationService.collectVariationsData();

                    await this.submitFormWithFormData();

                } catch (error) {
                    console.error('Form submit failed:', error);
                    this.uiService.showError('Form g√∂nderilirken bir hata olu≈ütu.');
                } finally {
                    this.uiService.hideLoading();
                }
            }

            async submitFormWithFormData() {
                try {
                    console.log('üöÄ Starting FormData submission');
                    
                    const form = this.getElement('productForm');
                    if (!form) {
                        throw new Error('Form element not found');
                    }
                    
                    const formData = new FormData();
                    
                    const imageInput = this.getElement('imageInput');
                    console.log('üîç Image input check:', {
                        element: !!imageInput,
                        files: imageInput ? imageInput.files : null,
                        filesLength: imageInput && imageInput.files ? imageInput.files.length : 0,
                        hasFile: !!(imageInput && imageInput.files && imageInput.files.length > 0)
                    });
                    
                    if (imageInput && imageInput.files && imageInput.files.length > 0) {
                        const file = imageInput.files[0];
                        console.log('üîç File details:', {
                            name: file.name,
                            size: file.size,
                            type: file.type,
                            lastModified: file.lastModified
                        });
                        
                        formData.append('productImage', file, file.name);
                        console.log('‚úÖ File appended to FormData');
                        
                        const hasImageInFormData = formData.has('productImage');
                        const imageFromFormData = formData.get('productImage');
                        console.log('üîç FormData verification:', {
                            hasImage: hasImageInFormData,
                            retrievedFile: imageFromFormData,
                            isFileInstance: imageFromFormData instanceof File
                        });
                        
                    } else {
                        console.log('‚ö†Ô∏è No image file found');
                        if (!this.state.isEditMode) {
                            console.log('‚ùå Not in edit mode, image required');
                            throw new Error('L√ºtfen bir resim se√ßin.');
                        }
                    }
                    
                    const textFields = [
                        { id: 'productName', name: 'productName' },
                        { id: 'productIdentifier', name: 'productIdentifier' }, 
                        { id: 'productDescription', name: 'productDescription' }
                    ];
                    
                    textFields.forEach(({ id, name }) => {
                        const field = this.getElement(id);
                        if (field) {
                            formData.append(name, field.value || '');
                            console.log(`‚úÖ Added ${name}:`, field.value || '(empty)');
                        }
                    });
                    
                    const hiddenFields = [
                        { id: 'editingProductId', name: 'editingProductId' },
                        { id: 'sizeTableData', name: 'sizeTableData' },
                        { id: 'customTableData', name: 'customTableData' },
                        { id: 'variationsData', name: 'variationsData' }
                    ];
                    
                    hiddenFields.forEach(({ id, name }) => {
                        const field = this.getElement(id);
                        if (field) {
                            formData.append(name, field.value || '');
                            console.log(`‚úÖ Added ${name}:`, (field.value || '').substring(0, 50) + '...');
                        }
                    });

                    const hiddenInputs = form.querySelectorAll('input[type="hidden"][name$="[]"], input[type="hidden"][name="productCategory"]');
                    console.log('üîç Found hidden inputs:', hiddenInputs.length);
                    
                    hiddenInputs.forEach(input => {
                        if (input.name && input.value) {
                            formData.append(input.name, input.value);
                            console.log(`‚úÖ Added ${input.name}:`, input.value);
                        }
                    });
                    
                    console.log('üìã Final FormData check:');
                    let totalEntries = 0;
                    let hasImageFile = false;
                    
                    for (let [key, value] of formData.entries()) {
                        totalEntries++;
                        if (key === 'productImage') {
                            hasImageFile = true;
                            console.log(`  ${key}: [File] ${value.name} (${value.size} bytes, ${value.type})`);
                        } else {
                            console.log(`  ${key}: ${value}`);
                        }
                    }
                    
                    console.log(`üìä FormData summary: ${totalEntries} entries, hasImage: ${hasImageFile}`);
                    
                    if (!hasImageFile && !this.state.isEditMode) {
                        throw new Error('Resim dosyasƒ± FormData\'ya eklenemedi!');
                    }
                    
                    console.log('üì° Sending request to:', form.action);
                    
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    console.log('üì° Response received:', {
                        status: response.status,
                        statusText: response.statusText,
                        ok: response.ok
                    });
                    
                    console.log('üìÑ Response headers:');
                    for (let [key, value] of response.headers.entries()) {
                        console.log(`  ${key}: ${value}`);
                    }
                    
                    if (response.ok) {
                        const contentType = response.headers.get('content-type');
                        
                        if (contentType && contentType.includes('application/json')) {
                            const result = await response.json();
                            console.log('üìÑ JSON Response:', result);
                            
                            if (result.success) {
                                this.uiService.showSuccess(result.message);
                                setTimeout(() => window.location.reload(), 1500);
                            } else {
                                throw new Error(result.message || '√úr√ºn kaydedilemedi.');
                            }
                        } else {
                            this.uiService.showSuccess('√úr√ºn ba≈üarƒ±yla kaydedildi!');
                            setTimeout(() => window.location.reload(), 1500);
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('‚ùå Server Error Response:', errorText.substring(0, 1000));
                        throw new Error(`Server error: ${response.status}`);
                    }
                    
                } catch (error) {
                    console.error('‚ùå Submit failed:', error);
                    throw error;
                }
            }
            
            clearForm() {
                try {
                    this.formService.clearForm();
                    this.showStep(1);
                } catch (error) {
                    console.error('Clear form failed:', error);
                    this.uiService.showError('Form temizlenirken bir hata olu≈ütu.');
                }
            }

            // Utility Methods
            getElement(id) {
                const element = document.getElementById(id);
                if (!element) {
                    console.warn(`Element not found: ${id}`);
                }
                return element;
            }

            escapeHtml(text) {
                if (typeof text !== 'string') return '';
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            debounce(func, wait) {
                return (...args) => {
                    clearTimeout(this.state.searchTimeout);
                    this.state.searchTimeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            validateEnvironment() {
                const requiredElements = ['productForm', 'step1', 'step2'];
                const missingElements = requiredElements.filter(id => !document.getElementById(id));

                if (missingElements.length > 0) {
                    console.error('Missing required elements:', missingElements);
                    this.uiService.showError('Uygulama d√ºzg√ºn y√ºklenemedi. Sayfayƒ± yenileyin.');
                    return false;
                }

                return true;
            }
        }

        /**
         * Arama Servisi
         */
        class SearchService {
            constructor(config) {
                this.config = config;
            }

            async searchProducts(query) {
                const response = await fetch(`${this.config.endpoints.productSearch}?q=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error('Product search failed');
                const data = await response.json();
                return data.items || [];
            }

            async searchItems(type, query) {
                const response = await fetch(`${this.config.endpoints.itemSearch}/${type}?q=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error(`${type} search failed`);
                const data = await response.json();
                return data.items || [];
            }

            async addColor(name) {
                const response = await fetch(this.config.endpoints.addColor, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ name })
                });

                if (!response.ok) throw new Error('Add color failed');
                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Add color failed');
                }

                return data;
            }
        }

        /**
         * Form Servisi
         */
        class FormService {
            constructor(config, state) {
                this.config = config;
                this.state = state;
            }

            fillForm(product) {
                try {
                    this.resetState();
                    this.setFieldValues(product);
                    this.setupSelectedItems(product);
                    this.setProductImage(product);
                    this.fillTables(product);
                } catch (error) {
                    console.error('Fill form failed:', error);
                    throw error;
                }
            }

            resetState() {
                this.state.lockedVariants = [];
                this.state.selectedItems = {
                    colors: [],
                    brands: [],
                    marketplaces: [],
                    categories: []
                };
            }

            setFieldValues(product) {
                this.setFieldValue('productName', product.name);
                this.setFieldValue('productIdentifier', product.productIdentifier);
                this.setFieldValue('productDescription', product.description);
            }

            setFieldValue(fieldId, value) {
                const field = document.getElementById(fieldId);
                if (field && value !== undefined && value !== null) {
                    field.value = value;
                }
            }

            setupSelectedItems(product) {
                if (product.categoryId) {
                    this.state.selectedItems.categories = [{
                        id: product.categoryId,
                        name: product.categoryName
                    }];
                }

                ['brands', 'marketplaces', 'variantColors'].forEach(key => {
                    if (product[key] && Array.isArray(product[key])) {
                        const targetKey = key === 'variantColors' ? 'colors' : key;
                        this.state.selectedItems[targetKey] = product[key];
                    }
                });
            }

            setProductImage(product) {
                if (product.imagePath) {
                    const preview = document.getElementById('imagePreview');
                    if (preview) {
                        preview.innerHTML = `<img src="${product.imagePath}" alt="Product Image" style="width: 100%; height: 100%; object-fit: cover;">`;
                    }
                }
            }

            fillTables(product) {
                if (product.sizeTable && Array.isArray(product.sizeTable)) {
                    const processedUsedSizes = this.processUsedItems(product.usedSizes);
                    window.productFormManager.tableService.populateSizeTable(
                        product.sizeTable,
                        processedUsedSizes
                    );
                }

                if (product.customTable && product.customTable.rows) {
                    const processedUsedCustoms = this.processUsedItems(product.usedCustoms);
                    window.productFormManager.tableService.populateCustomTable(
                        product.customTable,
                        processedUsedCustoms
                    );
                }
            }

            processUsedItems(usedItems) {
                if (Array.isArray(usedItems)) {
                    return usedItems;
                } else if (typeof usedItems === 'object' && usedItems !== null) {
                    return Object.values(usedItems);
                }
                return [];
            }

            setEditMode() {
                const identifierField = document.getElementById('productIdentifier');
                if (identifierField) {
                    identifierField.readOnly = true;
                    identifierField.style.backgroundColor = '#e9ecef';
                    identifierField.style.cursor = 'not-allowed';
                }

                const imageInput = document.getElementById('imageInput');
                if (imageInput) {
                    imageInput.removeAttribute('required');
                }

                const submitBtn = document.getElementById('submitBtn');
                if (submitBtn) {
                    submitBtn.textContent = 'üíæ √úr√ºn√º G√ºncelle';
                }
            }

            clearForm() {
                this.resetState();
                this.state.selectedProduct = null;
                this.state.isEditMode = false;

                const form = document.getElementById('productForm');
                if (form) {
                    form.reset();
                }

                this.clearUIElements();
                this.clearEditMode();
            }

            clearUIElements() {
                const elementsToHide = ['selectedProductInfo', 'sizeTablePreview', 'customTablePreview'];
                elementsToHide.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.style.display = 'none';
                    }
                });

                const hiddenInputs = ['editingProductId', 'sizeTableData', 'customTableData'];
                hiddenInputs.forEach(id => {
                    const input = document.getElementById(id);
                    if (input) {
                        input.value = '';
                    }
                });

                const imagePreview = document.getElementById('imagePreview');
                if (imagePreview) {
                    imagePreview.innerHTML = 'üì∑';
                }

                const tableBodies = ['#sizeTable tbody', '#customTable tbody'];
                tableBodies.forEach(selector => {
                    const tbody = document.querySelector(selector);
                    if (tbody) {
                        tbody.innerHTML = '';
                    }
                });
            }

            clearEditMode() {
                const identifierField = document.getElementById('productIdentifier');
                if (identifierField) {
                    identifierField.readOnly = false;
                    identifierField.style.backgroundColor = '';
                    identifierField.style.cursor = '';
                }

                const imageInput = document.getElementById('imageInput');
                if (imageInput) {
                    imageInput.setAttribute('required', 'required');
                }

                const submitBtn = document.getElementById('submitBtn');
                if (submitBtn) {
                    submitBtn.textContent = 'Kaydet';
                }
            }
        }

        /**
         * Tablo Servisi
         */
        class TableService {
            addSizeRow(values = {}, isLocked = false) {
                const tbody = document.querySelector('#sizeTable tbody');
                if (!tbody) return;

                const tr = document.createElement('tr');
                if (isLocked) {
                    tr.classList.add('locked-row');
                }

                tr.innerHTML = `
                    <td data-label="Beden">
                        <input type="text" class="form-control" value="${values.beden || ''}" ${isLocked ? 'readonly' : ''} required>
                        ${isLocked ? '<small class="text-muted">üîí Varyantlarda kullanƒ±lƒ±yor</small>' : ''}
                    </td>
                    <td data-label="En"><input type="number" class="form-control" value="${values.en || ''}" step="any" ${isLocked ? 'readonly' : ''} required></td>
                    <td data-label="Boy"><input type="number" class="form-control" value="${values.boy || ''}" step="any" ${isLocked ? 'readonly' : ''} required></td>
                    <td data-label="Y√ºkseklik"><input type="number" class="form-control" value="${values.yukseklik || ''}" step="any" ${isLocked ? 'readonly' : ''} required></td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm remove-row-btn w-100" ${isLocked ? 'style="opacity: 0.5; cursor: not-allowed;" title="Bu beden varyantlarda kullanƒ±ldƒ±ƒüƒ± i√ßin silinemez"' : ''}>
                            ${isLocked ? 'üîí Sil' : 'Sil'}
                        </button>
                    </td>
                `;

                tbody.appendChild(tr);
            }

            addCustomRow(value = {}, isLocked = false) {
                const tbody = document.querySelector('#customTable tbody');
                if (!tbody) return;

                const tr = document.createElement('tr');
                if (isLocked) {
                    tr.classList.add('locked-row');
                }

                const degerValue = typeof value === 'object' ? (value.deger || '') : value;

                tr.innerHTML = `
                    <td data-label="Deƒüer">
                        <input type="text" class="form-control" value="${degerValue}" ${isLocked ? 'readonly' : ''} required>
                        ${isLocked ? '<small class="text-muted">üîí Varyantlarda kullanƒ±lƒ±yor</small>' : ''}
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm remove-row-btn" ${isLocked ? 'style="opacity: 0.5; cursor: not-allowed;" title="Bu deƒüer varyantlarda kullanƒ±ldƒ±ƒüƒ± i√ßin silinemez"' : ''}>
                            ${isLocked ? 'üîí Sil' : 'Sil'}
                        </button>
                    </td>
                `;

                tbody.appendChild(tr);
            }

            saveSizeTable() {
                const rows = this.collectTableData('#sizeTable tbody tr', ['beden', 'en', 'boy', 'yukseklik']);
                if (!this.validateTableData(rows)) {
                    window.productFormManager.uiService.showError('L√ºtfen tablodaki t√ºm alanlarƒ± doldurun.');
                    return;
                }

                document.getElementById('sizeTableData').value = JSON.stringify(rows);
                this.updateSizeTablePreview(rows);
                this.closeModal('sizeTableModal');
            }

            saveCustomTable() {
                const titleInput = document.getElementById('customTableTitle');
                const title = titleInput ? titleInput.value.trim() : '';

                if (!title) {
                    window.productFormManager.uiService.showError('L√ºtfen Custom Tablo i√ßin bir ba≈ülƒ±k girin.');
                    return;
                }

                const rows = this.collectTableData('#customTable tbody tr', ['deger']);
                if (!this.validateTableData(rows)) {
                    window.productFormManager.uiService.showError('L√ºtfen tablodaki t√ºm deƒüer alanlarƒ±nƒ± doldurun.');
                    return;
                }

                const tableData = { title, rows };
                document.getElementById('customTableData').value = JSON.stringify(tableData);
                this.updateCustomTablePreview(tableData);
                this.closeModal('customTableModal');
            }

            collectTableData(selector, fields) {
                const rows = [];
                document.querySelectorAll(selector).forEach(tr => {
                    const rowData = {};
                    fields.forEach((field, index) => {
                        const input = tr.children[index]?.querySelector('input');
                        rowData[field] = input ? input.value.trim() : '';
                    });
                    rows.push(rowData);
                });
                return rows;
            }

            validateTableData(rows) {
                return rows.every(row => Object.values(row).every(value => value !== ''));
            }

            updateSizeTablePreview(rows) {
                const previewContainer = document.getElementById('sizeTablePreview');
                if (!previewContainer) return;

                if (rows.length > 0) {
                    let html = '<div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>Beden</th><th>En</th><th>Boy</th><th>Y√ºkseklik</th></tr></thead><tbody>';
                    rows.forEach(row => {
                        html += `<tr><td>${row.beden}</td><td>${row.en}</td><td>${row.boy}</td><td>${row.yukseklik}</td></tr>`;
                    });
                    html += '</tbody></table></div>';
                    previewContainer.innerHTML = html;
                    previewContainer.style.display = 'block';
                } else {
                    previewContainer.style.display = 'none';
                }
            }

            updateCustomTablePreview(tableData) {
                const previewContainer = document.getElementById('customTablePreview');
                if (!previewContainer) return;

                if (tableData.rows && tableData.rows.length > 0) {
                    let html = `<div class="table-responsive"><table class="table table-sm table-bordered"><thead><tr><th>${tableData.title || 'Custom'}</th></tr></thead><tbody>`;
                    tableData.rows.forEach(row => {
                        html += `<tr><td>${row.deger}</td></tr>`;
                    });
                    html += '</tbody></table></div>';
                    previewContainer.innerHTML = html;
                    previewContainer.style.display = 'block';
                } else {
                    previewContainer.style.display = 'none';
                }
            }

            populateSizeTable(sizeTable, usedSizes = []) {
                const tbody = document.querySelector('#sizeTable tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                }

                sizeTable.forEach(row => {
                    const sizeValue = row.beden || '';
                    const isLocked = usedSizes.some(usedSize => {
                        if (typeof usedSize === 'string') {
                            const extractedSize = usedSize.includes(' (En:') ?
                                usedSize.split(' (En:')[0] :
                                usedSize.split(' (')[0];
                            return extractedSize === sizeValue;
                        }
                        return usedSize === sizeValue;
                    });

                    this.addSizeRow(row, isLocked);
                });

                document.getElementById('sizeTableData').value = JSON.stringify(sizeTable);
                this.updateSizeTablePreview(sizeTable);
            }

            populateCustomTable(customTable, usedCustoms = []) {
                const customTitleElement = document.getElementById('customTableTitle');
                if (customTitleElement) {
                    customTitleElement.value = customTable.title || '';
                }

                const tbody = document.querySelector('#customTable tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                }

                if (customTable.rows && customTable.rows.length > 0) {
                    customTable.rows.forEach(row => {
                        const customValue = row.deger || '';
                        const isLocked = usedCustoms.includes(customValue);
                        this.addCustomRow(row, isLocked);
                    });
                }

                document.getElementById('customTableData').value = JSON.stringify(customTable);
                this.updateCustomTablePreview(customTable);
            }

            closeModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal && window.bootstrap) {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                }
            }
        }

        /**
         * Varyasyon Servisi
         */
        class VariationService {
            constructor(state) {
                this.state = state;
            }

            updateLockedVariants(product) {
                if (!product || !product.variants || product.variants.length === 0) {
                    this.state.lockedVariants = [];
                    return;
                }

                this.state.lockedVariants = product.variants.map(v => {
                    let sizeValue = v.size || v.sizeName || v.beden || v.productVariantSize?.name || v.productVariantSize?.beden;
                    let colorValue = v.color || v.colorName || v.renk || v.productVariantColor?.name;
                    let customValue = v.custom || v.customName || v.customValue || v.productVariantCustom?.deger;

                    if (sizeValue && typeof sizeValue === 'string') {
                        if (sizeValue.includes(' (En:')) {
                            sizeValue = sizeValue.split(' (En:')[0];
                        } else if (sizeValue.includes(' (')) {
                            sizeValue = sizeValue.split(' (')[0];
                        }
                    }

                    if (customValue === undefined || customValue === '' || customValue === 'undefined') {
                        customValue = null;
                    }

                    return {
                        color: colorValue,
                        size: sizeValue,
                        custom: customValue
                    };
                });
            }

            generateMatrix() {
                try {
                    const colors = this.state.selectedItems.colors.map(c => c.name);
                    const sizesData = this.getSizesData();
                    const sizes = sizesData.map(s => s.beden);
                    const customs = this.getCustomsData();

                    if (colors.length === 0 || sizes.length === 0) {
                        this.showMatrixError('Varyasyon matrisini olu≈üturmak i√ßin l√ºtfen en az bir Renk ve bir Beden se√ßin.');
                        return;
                    }

                    const combos = this.generateCombinations(colors, sizes, customs);
                    const html = this.generateMatrixHTML(combos, sizesData, customs);

                    const container = document.getElementById('variationTableContainer');
                    if (container) {
                        container.innerHTML = html;
                    }

                } catch (error) {
                    console.error('Generate matrix failed:', error);
                    this.showMatrixError('Varyasyon matrisi olu≈üturulurken bir hata olu≈ütu.');
                }
            }

            getSizesData() {
                try {
                    return JSON.parse(document.getElementById('sizeTableData').value || '[]');
                } catch (error) {
                    console.error('Parse sizes data failed:', error);
                    return [];
                }
            }

            getCustomsData() {
                try {
                    const customData = JSON.parse(document.getElementById('customTableData').value || '{}');
                    if (customData.rows && customData.rows.length > 0) {
                        return customData.rows
                            .map(row => row.deger)
                            .filter(value => value && value.trim() !== '');
                    }
                } catch (error) {
                    console.error('Parse customs data failed:', error);
                }
                return [];
            }

            generateCombinations(colors, sizes, customs) {
                const cartesianProduct = (arrays) => {
                    const filteredArrays = arrays.filter(arr => arr && arr.length > 0);
                    if (filteredArrays.length === 0) return [];
                    return filteredArrays.reduce((a, b) => a.flatMap(d => b.map(e => [...(Array.isArray(d) ? d : [d]), e])));
                };

                if (customs.length > 0) {
                    return cartesianProduct([colors, sizes, customs]);
                } else {
                    return cartesianProduct([colors, sizes]).map(item => [...item, null]);
                }
            }

            generateMatrixHTML(combos, sizesData, customs) {
                const hasCustomData = customs.length > 0;

                let html = '<table class="table table-bordered"><thead><tr>';
                html += '<th>Se√ß</th><th>Renk</th><th>Beden</th>';
                if (hasCustomData) html += '<th>Custom</th>';
                html += '<th>ƒ∞≈ülem</th>';
                html += '</tr></thead><tbody>';

                combos.forEach((combo, i) => {
                    const [color, size, custom] = combo;
                    const isLocked = this.isVariantLocked(color, size, custom);
                    const sizeLabel = this.formatSizeLabel(size, sizesData);

                    const rowClass = isLocked ? 'variant-locked' : '';
                    const lockIcon = isLocked ? 'üîí ' : '';
                    const checkboxAttributes = isLocked ? 'disabled checked' : '';

                    html += `<tr class="${rowClass}">
                        <td>
                            <input type="checkbox" class="variation-checkbox" data-index="${i}" ${checkboxAttributes}>
                            ${isLocked ? '<br><small>Mevcut varyant</small>' : ''}
                        </td>
                        <td>${lockIcon}${color}</td>
                        <td>${lockIcon}${sizeLabel}</td>`;

                    if (hasCustomData) {
                        html += `<td>${lockIcon}${custom || ''}</td>`;
                    }

                    html += `<td>`;
                    if (isLocked) {
                        html += `<button type="button" class="btn btn-danger btn-sm delete-variant-btn" 
                                    data-color="${color}" data-size="${size}" data-custom="${custom || ''}"
                                    title="Bu varyantƒ± sil ve √ºr√ºn√º unpublish yap">
                                    üóëÔ∏è Sil
                                </button>`;
                    } else {
                        html += '<span class="text-muted">-</span>';
                    }
                    html += `</td></tr>`;
                });

                html += '</tbody></table>';
                return html;
            }

            isVariantLocked(color, size, custom) {
                return this.state.lockedVariants.some(v => {
                    const colorMatch = (v.color === color);
                    const sizeMatch = (v.size === size);
                    const normalizedLockedCustom = (v.custom === undefined || v.custom === null) ? null : v.custom;
                    const normalizedCheckingCustom = (custom === undefined || custom === null) ? null : custom;
                    const customMatch = (normalizedLockedCustom === normalizedCheckingCustom);

                    return colorMatch && sizeMatch && customMatch;
                });
            }

            formatSizeLabel(size, sizesData) {
                const sizeObj = sizesData.find(s => s.beden === size);
                if (sizeObj) {
                    return `${size} (En: ${sizeObj.en}, Boy: ${sizeObj.boy}, Y√ºkseklik: ${sizeObj.yukseklik})`;
                }
                return size;
            }

            showMatrixError(message) {
                const container = document.getElementById('variationTableContainer');
                if (container) {
                    container.innerHTML = `<div class="alert alert-warning">${message}</div>`;
                }
            }

            collectVariationsData() {
                const rows = [];
                const customData = this.getCustomsData();
                const hasCustomData = customData.length > 0;

                document.querySelectorAll('#variationTableContainer tbody tr').forEach(tr => {
                    const checkbox = tr.querySelector('.variation-checkbox');
                    if (checkbox && checkbox.checked && !checkbox.disabled) {
                        const tds = tr.querySelectorAll('td');
                        const renk = tds[1].innerText.replace('üîí ', '');
                        const beden = tds[2].innerText.replace('üîí ', '').split(' (')[0];

                        const rowData = { renk, beden };

                        if (hasCustomData && tds.length > 3) {
                            const customValue = tds[3].innerText.replace('üîí ', '').trim();
                            if (customValue && customValue !== '') {
                                rowData.custom = customValue;
                            }
                        }

                        rows.push(rowData);
                    }
                });

                const variationsInput = document.getElementById('variationsData');
                if (variationsInput) {
                    variationsInput.value = JSON.stringify(rows);
                }
            }
        }

        /**
         * Doƒürulama Servisi
         */
        class ValidationService {
            validateStep1() {
                const step1 = document.getElementById('step1');
                if (!step1) return false;

                let isValid = true;

                // Required fields validation
                const requiredInputs = step1.querySelectorAll('input[required], textarea[required], select[required]');
                requiredInputs.forEach(input => {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        input.classList.remove('is-invalid');
                    }
                });

                // Image validation
                const imageInput = document.getElementById('imageInput');
                const isEditMode = window.productFormManager && window.productFormManager.state.isEditMode;

                if (imageInput && !isEditMode) {
                    if (!imageInput.files || imageInput.files.length === 0) {
                        this.showFieldError(imageInput, 'L√ºtfen bir resim se√ßin.');
                        isValid = false;
                    } else {
                        const file = imageInput.files[0];
                        if (!file.type.startsWith('image/')) {
                            this.showFieldError(imageInput, 'L√ºtfen ge√ßerli bir resim dosyasƒ± se√ßin.');
                            isValid = false;
                        } else if (file.size > 5 * 1024 * 1024) {
                            this.showFieldError(imageInput, 'Resim dosyasƒ± √ßok b√ºy√ºk (max 5MB).');
                            isValid = false;
                        } else {
                            this.clearFieldError(imageInput);
                        }
                    }
                }

                // Selected items validation
                const selectedItems = window.productFormManager?.state?.selectedItems || {};

                if (!selectedItems.colors || selectedItems.colors.length === 0) {
                    this.showContainerError('colorsSelected', 'En az bir renk se√ßmelisiniz.');
                    isValid = false;
                } else {
                    this.clearContainerError('colorsSelected');
                }

                const sizeTableData = document.getElementById('sizeTableData')?.value;
                if (!sizeTableData || sizeTableData === '[]') {
                    this.showContainerError('sizeTableBtn', 'Beden tablosu olu≈üturmalƒ±sƒ±nƒ±z.');
                    isValid = false;
                } else {
                    this.clearContainerError('sizeTableBtn');
                }

                if (!isValid) {
                    if (window.productFormManager) {
                        window.productFormManager.uiService.showError('L√ºtfen t√ºm zorunlu alanlarƒ± doldurun.');
                    }
                }

                return isValid;
            }

            showFieldError(field, message) {
                field.classList.add('is-invalid');
                field.title = message;
            }

            clearFieldError(field) {
                field.classList.remove('is-invalid');
                field.title = '';
            }

            showContainerError(containerId, message) {
                const container = document.getElementById(containerId);
                if (container) {
                    container.style.borderColor = '#dc3545';
                    container.title = message;
                }
            }

            clearContainerError(containerId) {
                const container = document.getElementById(containerId);
                if (container) {
                    container.style.borderColor = '#dee2e6';
                    container.title = '';
                }
            }
        }

        /**
         * UI Servisi
         */
        class UIService {
            showElement(elementId) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.style.display = 'block';
                }
            }

            hideElement(elementId) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.style.display = 'none';
                }
            }

            showLoading() {
                this.showElement('loadingOverlay');
                const form = document.getElementById('productForm');
                if (form) {
                    form.classList.add('form-disabled');
                }
            }

            hideLoading() {
                this.hideElement('loadingOverlay');
                const form = document.getElementById('productForm');
                if (form) {
                    form.classList.remove('form-disabled');
                }
            }

            showError(message) {
                alert(`‚ùå Hata: ${message}`);
            }

            showSuccess(message) {
                alert(`‚úÖ Ba≈üarƒ±lƒ±: ${message}`);
            }
        }

        /**
         * Uygulama Ba≈ülatma
         */
        document.addEventListener('DOMContentLoaded', function() {
            try {
                window.productFormManager = new ProductFormManager();
                console.log('‚úÖ Product Form Manager initialized successfully');
            } catch (error) {
                console.error('‚ùå Product Form Manager initialization failed:', error);
                alert('Uygulama ba≈ülatƒ±lamadƒ±. L√ºtfen sayfayƒ± yenileyin.');
            }
        });

    </script>
{% endblock %}