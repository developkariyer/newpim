{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link href="{{ asset('assets/css/product.css') }}" rel="stylesheet">
{% endblock %}

{% block title %}Set √úr√ºn Olu≈ütur{% endblock %}

{% block content %}
    <div class="product-form-container">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'danger' ? 'danger' : (label == 'success' ? 'success' : 'info') }}" style="margin-bottom: 1rem;">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}

        <form id="setProductForm" method="POST" action="{{ path('set_product_create') }}">
            <input type="hidden" name="_token" value="{{ csrf_token }}">
            <input type="hidden" id="selectedProductId" name="selectedProductId" value="">
            <input type="hidden" id="iwaskuItemsData" name="iwaskuItems" value="">

            <!-- Ana √úr√ºn Se√ßimi -->
            <div class="form-section" style="background: #f8f9fa; border-color: #17a2b8;">
                <h3 style="border-color: #17a2b8; color: #17a2b8;">üîç Ana √úr√ºn Se√ß</h3>
                <div class="form-group" style="position: relative;">
                    <label for="productSearch">√úr√ºn Ara (ƒ∞wasku veya ƒ∞sim)</label>
                    <input type="text" 
                           id="productSearch" 
                           class="form-control" 
                           placeholder="√ñrn: IW-001 veya Premium Cotton T-Shirt"
                           autocomplete="off">
                    <div id="productSearchResults" style="display: none; position: absolute; z-index: 1000; width: 100%; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; background: white; border-radius: 4px; margin-top: 2px;"></div>
                </div>
                
                <div id="selectedProductInfo" style="display: none; padding: 1rem; background: #e3f2fd; border-radius: 4px; margin-top: 1rem;">
                    <h5 style="margin: 0 0 0.5rem 0; color: #1976d2;">‚úÖ Se√ßilen √úr√ºn:</h5>
                    <div id="selectedProductDetails"></div>
                    <button type="button" id="clearSelectedProduct" class="btn btn-outline-secondary btn-sm" style="margin-top: 0.5rem;">‚ùå Se√ßimi Temizle</button>
                </div>
            </div>

            <!-- ƒ∞wasku √úr√ºnleri Se√ßimi -->
            <div class="form-section">
                <h3>üì¶ ƒ∞wasku √úr√ºnleri Ekle</h3>
                <div class="form-group" style="position: relative;">
                    <label for="iwaskuSearch">ƒ∞wasku √úr√ºn Ara</label>
                    <input type="text" 
                           id="iwaskuSearch" 
                           class="form-control" 
                           placeholder="ƒ∞wasku kodu veya √ºr√ºn adƒ± ile ara..."
                           autocomplete="off">
                    <div id="iwaskuSearchResults" style="display: none; position: absolute; z-index: 1000; width: 100%; max-height: 200px; overflow-y: auto; border: 1px solid #ced4da; background: white; border-radius: 4px; margin-top: 2px;"></div>
                </div>

                <div id="selectedIwaskuContainer" style="margin-top: 1rem;">
                    <h5>Se√ßilen ƒ∞wasku √úr√ºnleri:</h5>
                    <div id="selectedIwaskuList" style="min-height: 50px; border: 2px dashed #dee2e6; border-radius: 4px; padding: 1rem; background: #f8f9fa;">
                        <small style="color: #6c757d;">Hen√ºz ƒ∞wasku √ºr√ºn√º se√ßilmedi</small>
                    </div>
                </div>
            </div>

            <!-- Submit Butonu -->
            <div style="text-align: right; margin-top: 2rem;">
                <button type="button" class="btn btn-secondary me-2" onclick="window.location.href='{{ path('product') }}'">
                    ƒ∞ptal
                </button>
                <button type="submit" id="submitBtn" class="btn btn-success" disabled>
                    üéØ Set √úr√ºn Olu≈ütur
                </button>
            </div>
        </form>
    </div>
{% endblock %}

{% block body_scripts %}
    {{ parent() }}
        <script>
        window.setProductConfig = {
            csrfToken: '{{ csrf_token }}',
            endpoints: {
                searchProducts: '{{ path('set_product_search_products') }}'
                // searchIwasku artƒ±k gerekli deƒüil
            }
        };

        const SetProduct = {
            selectedProduct: null,
            selectedIwasku: [],

            init() {
                this.bindEvents();
            },

            bindEvents() {
                // Ana √ºr√ºn arama
                document.getElementById('productSearch').addEventListener('input', (e) => {
                    this.handleSearch(e.target.value, 'product');
                });
                
                // ƒ∞wasku arama - aynƒ± endpoint'i kullan
                document.getElementById('iwaskuSearch').addEventListener('input', (e) => {
                    this.handleSearch(e.target.value, 'iwasku');
                });

                // Temizle butonu
                document.getElementById('clearSelectedProduct').addEventListener('click', () => {
                    this.clearSelectedProduct();
                });

                // Form submit
                document.getElementById('setProductForm').addEventListener('submit', (e) => {
                    this.handleSubmit(e);
                });

                // Dƒ±≈ü tƒ±klama ile sonu√ßlarƒ± gizle
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('#productSearch') && !e.target.closest('#productSearchResults')) {
                        document.getElementById('productSearchResults').style.display = 'none';
                    }
                    if (!e.target.closest('#iwaskuSearch') && !e.target.closest('#iwaskuSearchResults')) {
                        document.getElementById('iwaskuSearchResults').style.display = 'none';
                    }
                });
            },

            handleSearch(query, type) {
                if (query.length < 2) {
                    document.getElementById(type + 'SearchResults').style.display = 'none';
                    return;
                }

                // Her iki arama da aynƒ± endpoint'i kullanƒ±yor
                fetch(`${window.setProductConfig.endpoints.searchProducts}?q=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        this.displayResults(data.items || [], type);
                    })
                    .catch(error => {
                        console.error('Arama hatasƒ±:', error);
                    });
            },

            displayResults(items, type) {
                const container = document.getElementById(type + 'SearchResults');
                
                if (items.length === 0) {
                    container.innerHTML = '<div style="padding: 0.75rem; color: #6c757d;">ƒ∞wasku √ºr√ºn√º bulunamadƒ±</div>';
                    container.style.display = 'block';
                    return;
                }

                const html = items.map((item, itemIndex) => {
                    const displayText = `${item.iwasku} - ${item.name}`;
                    const setIndicator = item.isSetProduct ? ' üì¶ (Set √úr√ºn)' : '';
                    
                    // onclick eventi yerine data attribute kullanƒ±p event listener ekleyelim
                    return `
                        <div class="search-result-item" 
                             data-type="${type}"
                             data-item-index="${itemIndex}"
                             style="padding: 0.75rem; border-bottom: 1px solid #eee; cursor: pointer; ${item.isSetProduct ? 'background-color: #fff3cd;' : ''}" 
                             onmouseover="this.style.backgroundColor='#f8f9fa'" 
                             onmouseout="this.style.backgroundColor='${item.isSetProduct ? '#fff3cd' : 'white'}'">
                            <strong>${displayText}${setIndicator}</strong>
                            ${item.description ? `<br><small style="color: #6c757d;">${item.description}</small>` : ''}
                            ${item.isSetProduct ? `<br><small style="color: #856404;">Mevcut ${item.bundleProducts.length} set √ºr√ºn√º var</small>` : ''}
                        </div>
                    `;
                }).join('');

                container.innerHTML = html;
                container.style.display = 'block';
                this.bindResultClickEvents(items, type);
            },

            bindResultClickEvents(items, type) {
                const container = document.getElementById(type + 'SearchResults');
                const resultItems = container.querySelectorAll('.search-result-item');
                
                resultItems.forEach((element, index) => {
                    element.addEventListener('click', () => {
                        const item = items[index];
                        if (type === 'product') {
                            this.selectProduct(item.id, item.name, item.identifier, item.iwasku, item.description, item.bundleProducts);
                        } else {
                            this.addIwaskuProduct(item.id, item.name, item.iwasku, item.identifier);
                        }
                    });
                });
            },

            selectProduct(id, name, identifier, iwasku, description, bundleProducts = []) {
                console.log('selectProduct √ßaƒürƒ±ldƒ±:', id, name, bundleProducts);
                
                this.selectedProduct = { id, name, identifier, iwasku, description, bundleProducts };
                
                document.getElementById('productSearch').value = `${iwasku} - ${name}`;
                document.getElementById('selectedProductId').value = id;
                document.getElementById('productSearchResults').style.display = 'none';
                
                const setInfo = bundleProducts.length > 0 ? 
                    `<p><strong>üì¶ Set √úr√ºn:</strong> ${bundleProducts.length} √ºr√ºn i√ßeriyor</p>` : '';
                
                const detailsHtml = `
                    <p><strong>ID:</strong> ${id}</p>
                    <p><strong>ƒ∞wasku:</strong> ${iwasku}</p>
                    <p><strong>Identifier:</strong> ${identifier}</p>
                    <p><strong>ƒ∞sim:</strong> ${name}</p>
                    ${description ? `<p><strong>A√ßƒ±klama:</strong> ${description}</p>` : ''}
                    ${setInfo}
                `;
                
                document.getElementById('selectedProductDetails').innerHTML = detailsHtml;
                document.getElementById('selectedProductInfo').style.display = 'block';
                
                // Eƒüer mevcut set √ºr√ºnleri varsa bunlarƒ± ekle
                if (bundleProducts.length > 0) {
                    console.log('Bundle products bulundu, ekleniyor:', bundleProducts);
                    this.selectedIwasku = bundleProducts.map(bp => ({
                        id: bp.id,
                        name: bp.name,
                        iwasku: bp.iwasku,
                        identifier: bp.identifier,
                        quantity: bp.quantity || 1
                    }));
                    this.updateIwaskuList();
                } else {
                    this.selectedIwasku = [];
                    this.updateIwaskuList();
                }
                
                this.updateSubmitButton();
            },

            clearSelectedProduct() {
                this.selectedProduct = null;
                this.selectedIwasku = []; 
                document.getElementById('productSearch').value = '';
                document.getElementById('selectedProductId').value = '';
                document.getElementById('selectedProductInfo').style.display = 'none';
                this.updateIwaskuList(); 
                this.updateSubmitButton();
            },

            addIwaskuProduct(id, name, iwasku, identifier) {
                if (this.selectedProduct && this.selectedProduct.id === id) {
                    alert('Ana √ºr√ºn ile aynƒ± √ºr√ºn√º set √ºr√ºn√º olarak ekleyemezsiniz!');
                    return;
                }
                if (this.selectedIwasku.find(item => item.id === id)) {
                    alert('Bu √ºr√ºn zaten eklenmi≈ü!');
                    return;
                }
                const iwaskuItem = { id, name, iwasku, identifier, quantity: 1 };
                this.selectedIwasku.push(iwaskuItem);
                document.getElementById('iwaskuSearch').value = '';
                document.getElementById('iwaskuSearchResults').style.display = 'none';
                this.updateIwaskuList();
                this.updateSubmitButton();
            },

            updateIwaskuList() {
                const container = document.getElementById('selectedIwaskuList');
                if (this.selectedIwasku.length === 0) {
                    container.innerHTML = '<small style="color: #6c757d;">Hen√ºz ƒ∞wasku √ºr√ºn√º se√ßilmedi</small>';
                    return;
                }
                const isEditingSet = this.selectedProduct && this.selectedProduct.bundleProducts && this.selectedProduct.bundleProducts.length > 0;
                const headerText = isEditingSet ? 
                    `<div style="background: #d1ecf1; padding: 0.5rem; border-radius: 4px; margin-bottom: 1rem; color: #0c5460;">
                        <strong>üìù Set √úr√ºn D√ºzenleniyor:</strong> Mevcut √ºr√ºnleri g√∂rebilir, silebilir veya yeni √ºr√ºnler ekleyebilirsiniz.
                    </div>` : '';

                const html = headerText + this.selectedIwasku.map((item, index) => {
                    const isOriginal = isEditingSet && this.selectedProduct.bundleProducts.some(bp => bp.id === item.id);
                    const originalBadge = isOriginal ? '<span style="background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; margin-left: 5px;">Mevcut</span>' : '<span style="background: #007bff; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; margin-left: 5px;">Yeni</span>';
                    
                    return `
                        <div style="display: flex; align-items: center; justify-content: space-between; background: white; border: 1px solid #dee2e6; border-radius: 4px; padding: 0.75rem; margin-bottom: 0.5rem; ${isOriginal ? 'border-left: 4px solid #28a745;' : 'border-left: 4px solid #007bff;'}">
                            <div style="flex: 1;">
                                <strong>${item.iwasku}</strong> - ${item.name}${originalBadge}
                                <br><small style="color: #6c757d;">ID: ${item.identifier}</small>
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <label>Adet:</label>
                                <input type="number" 
                                       value="${item.quantity}" 
                                       min="1" 
                                       style="width: 60px; text-align: center; padding: 0.25rem;"
                                       onchange="SetProduct.updateQuantity(${index}, this.value)">
                                <button type="button" 
                                        onclick="SetProduct.removeIwaskuProduct(${index})"
                                        style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 0.25rem 0.5rem; cursor: pointer;"
                                        title="${isOriginal ? 'Mevcut √ºr√ºn√º kaldƒ±r' : 'Yeni √ºr√ºn√º kaldƒ±r'}">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');

                container.innerHTML = html;
                document.getElementById('iwaskuItemsData').value = JSON.stringify(this.selectedIwasku);
            },

            updateQuantity(index, quantity) {
                if (quantity < 1) quantity = 1;
                this.selectedIwasku[index].quantity = parseInt(quantity);
                document.getElementById('iwaskuItemsData').value = JSON.stringify(this.selectedIwasku);
            },

            removeIwaskuProduct(index) {
                this.selectedIwasku.splice(index, 1);
                this.updateIwaskuList();
                this.updateSubmitButton();
            },

            updateSubmitButton() {
                const submitBtn = document.getElementById('submitBtn');
                const canSubmit = this.selectedProduct && this.selectedIwasku.length > 0;
                submitBtn.disabled = !canSubmit;
            },

            handleSubmit(e) {
                if (!this.selectedProduct) {
                    e.preventDefault();
                    alert('L√ºtfen bir ana √ºr√ºn se√ßin!');
                    return;
                }

                if (this.selectedIwasku.length === 0) {
                    e.preventDefault();
                    alert('L√ºtfen en az bir ƒ∞wasku √ºr√ºn√º ekleyin!');
                    return;
                }

                document.getElementById('iwaskuItemsData').value = JSON.stringify(this.selectedIwasku);
            }
        };

        document.addEventListener('DOMContentLoaded', function() {
            SetProduct.init();
        });
    </script>
{% endblock %}